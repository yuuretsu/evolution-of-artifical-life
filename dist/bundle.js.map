{"version":3,"sources":["webpack://artifical-life/./src/lib/Bot.ts","webpack://artifical-life/./src/lib/Grid.ts","webpack://artifical-life/./src/lib/drawing.ts","webpack://artifical-life/./src/lib/math-functions.ts","webpack://artifical-life/./src/lib/world.ts","webpack://artifical-life/./src/main.ts","webpack://artifical-life/webpack/bootstrap","webpack://artifical-life/webpack/startup"],"names":["world","x","y","color","energy","genome","family","abilities","Bot","amount","_narrow","randInt","age","lastAction","Rgba","this","n","fixNumber","narrowToCoords","MOORE_NEIGHBOURHOOD","narrow","fixCoords","getForvard","coords","block","get","moveTo","swap","multiplyTo","interpolate","replication","mutateRgb","randMove","onStep","alive","doAction","onDie","DynamicBlock","bot","length","genes","_pointer","randGene","action","randChoice","GENE_TEMPLATES","property","Math","random","branches","mutateGene","gene","limNumber","randFloat","map","i","fillRandom","start","create","fillPlant","Genome","GENE","pointer","RESULT","goto","completed","photo","min","attack","max","forward","E","difference","DeadBot","width","height","cells","set","value","remove","x2","y2","bufferA","bufferB","randCoords","randEmpty","red","green","blue","alpha","randRgb","other","t","normalise","abs","MAX_DIF","node","document","createElement","ctx","getContext","Canvas","data","getImageData","setPixel","POINTER","update","putImageData","PixelsData","bottom","top","floor","from","to","arr","number","a","b","Block","assign","pixelSize","img","imageSmoothingEnabled","dynamic","drawLayer","layer","drawImage","clearImage","clearRect","visualize","func","col","init","step","key","undefined","World","onResizeWindow","querySelector","style","maxHeight","window","innerHeight","parseInt","BOTS_AMOUNT","drawColors","drawEnergy","drawAbilities","normalizeNumber","drawFamilies","drawLastAction","addEventListener","e","target","toString","currentX","currentY","initialX","initialY","$btnMenu","$imgContainer","$img","checked","classList","add","xOffset","yOffset","active","dragStart","TouchEvent","touches","clientX","clientY","dragEnd","drag","preventDefault","transform","$amount","$fps","$frameNumber","$viewMode","$narrows","paused","lastLoop","Date","now","fps","innerHTML","toFixed","xy","getNarrowImg","setTimeout","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"bundle.js","sourcesContent":["import { Rgba } from \"./drawing\";\r\nimport { fixNumber, limNumber, randChoice, randFloat, randInt } from \"./math-functions\";\r\nimport { DynamicBlock, MOORE_NEIGHBOURHOOD, World } from \"./world\";\r\n\r\nexport default class Bot extends DynamicBlock {\r\n    static amount = 0;\r\n    private _narrow: number;\r\n    age: number;\r\n    lastAction: Rgba;\r\n    constructor(\r\n        world: World,\r\n        x: number,\r\n        y: number,\r\n        color: Rgba,\r\n        public energy: number,\r\n        public genome: Genome,\r\n        public family: Rgba,\r\n        public abilities: {\r\n            photo: number,\r\n            attack: number\r\n        }\r\n    ) {\r\n        super(world, x, y, color);\r\n        Bot.amount++;\r\n        this._narrow = randInt(0, 8);\r\n        this.age = 0;\r\n        this.lastAction = new Rgba(20, 20, 20, 255);\r\n    }\r\n    set narrow(n: number) {\r\n        this._narrow = fixNumber(0, 8, n);\r\n    }\r\n    get narrow(): number {\r\n        return this._narrow;\r\n    }\r\n    narrowToCoords(): [number, number] {\r\n        const x = this.x + MOORE_NEIGHBOURHOOD[this.narrow][0];\r\n        const y = this.y + MOORE_NEIGHBOURHOOD[this.narrow][1];\r\n        return this.world.fixCoords(x, y);\r\n    }\r\n    getForvard() {\r\n        const coords = this.narrowToCoords();\r\n        return { block: this.world.get(...coords), coords: coords };\r\n    }\r\n    moveTo(x: number, y: number) {\r\n        this.world.swap(this.x, this.y, x, y);\r\n    }\r\n    multiplyTo(x: number, y: number) {\r\n        new Bot(\r\n            this.world,\r\n            x,\r\n            y,\r\n            this.color.interpolate(new Rgba(255, 255, 255, 255), 0.25),\r\n            this.energy / 3,\r\n            this.genome.replication(),\r\n            this.family.mutateRgb(10),\r\n            { ...this.abilities }\r\n        );\r\n        this.energy /= 3;\r\n    }\r\n    randMove() {\r\n        const coords = this.world.fixCoords(\r\n            this.x + randInt(-1, 2),\r\n            this.y + randInt(-1, 2)\r\n        );\r\n        this.moveTo(...coords);\r\n    }\r\n    onStep() {\r\n        if (this.energy < 1 || this.energy > 100 || this.age > 2000) {\r\n            this.alive = false;\r\n            return;\r\n        }\r\n        this.genome.doAction(this);\r\n        this.energy -= 0.1;\r\n        this.age += 1;\r\n    }\r\n    onDie() {\r\n        Bot.amount--;\r\n        // new DeadBot(this);\r\n    }\r\n}\r\n\r\nclass DeadBot extends DynamicBlock {\r\n    age: number;\r\n    constructor(bot: Bot) {\r\n        super(bot.world, bot.x, bot.y, bot.color.interpolate(new Rgba(0, 0, 0, 255), 0.5));\r\n        this.age = 0;\r\n    }\r\n    onStep() {\r\n        if (this.age > 500) {\r\n            this.alive = false;\r\n        }\r\n        this.color = this.color.interpolate(new Rgba(10, 10, 50, 255), 0.005);\r\n        this.age++;\r\n    }\r\n}\r\n\r\nexport class Genome {\r\n    genes: Gene[];\r\n    private _pointer: number;\r\n    constructor(readonly length: number) {\r\n        this.genes = [];\r\n        this._pointer = 0;\r\n    }\r\n    set pointer(n: number) {\r\n        this._pointer = fixNumber(0, this.length, n);\r\n    }\r\n    get pointer() {\r\n        return this._pointer;\r\n    }\r\n    randGene(): Gene {\r\n        return {\r\n            action: randChoice(GENE_TEMPLATES),\r\n            property: Math.random(),\r\n            branches: [\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length)\r\n            ]\r\n        };\r\n    }\r\n    mutateGene(gene: Gene): Gene {\r\n        return {\r\n            action: Math.random() > 0.9 ? randChoice(GENE_TEMPLATES) : gene.action,\r\n            property: limNumber(0, 1, gene.property + randFloat(-0.01, 0.01)),\r\n            branches: gene.branches.map(\r\n                i => Math.random() > 0.9\r\n                    ? randInt(0, this.length)\r\n                    : i\r\n            ) as [number, number, number, number]\r\n        }\r\n    }\r\n    fillRandom(start: number = 0): this {\r\n        for (let i = start; i < this.length; i++) {\r\n            this.genes[i] = this.randGene();\r\n        }\r\n        return this;\r\n    }\r\n    create(genes: Gene[]): this {\r\n        for (let i = 0; i < genes.length; i++) {\r\n            this.genes[i] = genes[i];\r\n        }\r\n        this.fillRandom(genes.length);\r\n        return this;\r\n    }\r\n    fillPlant(): this {\r\n        for (let i = 0; i < this.length; i++) {\r\n            this.genes[i] = {\r\n                action: GENE_TEMPLATES[randInt(0, 3)],\r\n                property: Math.random(),\r\n                branches: [\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length)\r\n                ]\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    // replication2() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.mutateGene(this.genes[i]);\r\n    //     }\r\n    //     return genome;\r\n    // }\r\n    // replication() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.genes[i];\r\n    //     }\r\n    //     const pointer = randInt(0, genome.length);\r\n    //     genome.genes[pointer] = this.mutateGene(this.genes[pointer]);\r\n    //     return genome;\r\n    // }\r\n    replication() {\r\n        const genome = new Genome(this.length);\r\n        for (let i = 0; i < this.length; i++) {\r\n            genome.genes[i] = Math.random() > 0.995\r\n                ? this.mutateGene(this.genes[i])\r\n                : this.genes[i];\r\n        }\r\n        return genome;\r\n    }\r\n    doAction(bot: Bot) {\r\n        bot.lastAction = new Rgba(20, 20, 20, 255);\r\n        for (let i = 0; i < 20; i++) {\r\n            const GENE: Gene = this.genes[this.pointer];\r\n            const RESULT = GENE.action(bot, GENE.property, GENE.branches);\r\n            if (RESULT.goto) {\r\n                this.pointer = RESULT.goto;\r\n            } else {\r\n                this.pointer++;\r\n            }\r\n            if (RESULT.completed) return;\r\n        }\r\n        bot.color = bot.color.interpolate(new Rgba(100, 100, 100, 255), 0.1);\r\n    }\r\n}\r\n\r\ntype ActionResult = { completed: boolean, goto?: number }\r\n\r\ntype ActionFn = (\r\n    bot: Bot,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n) => ActionResult;\r\n\r\ntype Gene = {\r\n    action: ActionFn,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n}\r\n\r\nconst GENE_TEMPLATES: ActionFn[] = [\r\n    // Restart\r\n    (bot, property, branches) => {\r\n        return { completed: false, goto: 0 }\r\n    },\r\n\r\n    // Photosynthesis\r\n    (bot, property, branches) => {\r\n        bot.energy += 0.5 * bot.abilities.photo ** 2;\r\n        bot.abilities.photo = Math.min(1, bot.abilities.photo + 0.01);\r\n        bot.abilities.attack = Math.max(0, bot.abilities.attack - 0.01);\r\n        bot.color = bot.color.interpolate(new Rgba(0, 255, 0, 255), 0.01);\r\n        bot.lastAction = new Rgba(0, 255, 0, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Rotate\r\n    (bot, property, branches) => {\r\n        if (property > 0.5) {\r\n            bot.narrow++;\r\n        } else {\r\n            bot.narrow--;\r\n        }\r\n        return { completed: false }\r\n    },\r\n\r\n    // Multiply\r\n    (bot, property, branches) => {\r\n        const forward = bot.getForvard();\r\n        if (!forward.block && bot.age > 2) {\r\n            bot.multiplyTo(...forward.coords);\r\n            bot.lastAction = new Rgba(0, 0, 255, 255);\r\n        }\r\n        // bot.lastAction = new Rgba(0, 0, 255, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Share energy\r\n    (bot, property, branches) => {\r\n        bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.005);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot && forward.block.energy < bot.energy) {\r\n            const E = (forward.block.energy + bot.energy) / 2;\r\n            bot.energy = E;\r\n            forward.block.energy = E;\r\n            bot.lastAction = new Rgba(0, 100, 255, 255);\r\n        }\r\n        // bot.lastAction = new Rgba(0, 100, 255, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Look forward\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            if (forward.block.family.difference(bot.color) < property) {\r\n                return { completed: false, goto: branches[0] }\r\n            } else {\r\n                return { completed: false, goto: branches[1] }\r\n            }\r\n        } else if (forward.block instanceof DeadBot) {\r\n            return { completed: false, goto: branches[2] }\r\n        } else {\r\n            return { completed: false, goto: branches[3] }\r\n        }\r\n    },\r\n\r\n    (bot, property, branches) => {\r\n        if (bot.energy / 100 < property) {\r\n            return { completed: false, goto: branches[0] }\r\n        } else {\r\n            return { completed: false, goto: branches[1] }\r\n        }\r\n    },\r\n\r\n    // DestroyDead\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof DeadBot && forward.block.age > 2) {\r\n            forward.block.alive = false;\r\n            bot.lastAction = new Rgba(255, 255, 0, 255);\r\n        }\r\n        // bot.lastAction = new Rgba(255, 255, 0, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Move\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (!forward.block) bot.moveTo(...forward.coords);\r\n        bot.lastAction = new Rgba(255, 255, 255, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // // Move 2\r\n    // (bot, property, branches) => {\r\n    //     // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     bot.moveTo(...forward.coords);\r\n    //     bot.energy -= 0.1;\r\n    //     return { completed: true }\r\n    // },\r\n\r\n    // Kill\r\n    (bot, property, branches) => {\r\n        bot.energy -= 0.1;\r\n        bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        bot.abilities.attack = Math.min(1, bot.abilities.attack + 0.01);\r\n        bot.abilities.photo = Math.max(0, bot.abilities.photo - 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            const E = (forward.block.energy / 2) * bot.abilities.attack ** 2;\r\n            forward.block.energy -= forward.block.energy / 2;\r\n            bot.energy += E;\r\n            bot.lastAction = new Rgba(255, 0, 0, 255);\r\n        }\r\n        // bot.lastAction = new Rgba(255, 0, 0, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // // Virus\r\n    // (bot, property, branches) => {\r\n    //     bot.color = bot.color.interpolate(new Rgba(255, 0, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     if (forward.block instanceof Bot) {\r\n    //         forward.block.genome = bot.genome.replication();\r\n    //         bot.lastAction = new Rgba(255, 0, 255, 255);\r\n    //     }\r\n    //     return { completed: true }\r\n    // }\r\n];","import { fixNumber, randInt } from \"./math-functions\";\r\n\r\nexport default class Grid<T> {\r\n    private readonly cells: (T | undefined)[][];\r\n    constructor(readonly width: number, readonly height: number) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            this.cells[x] = [];\r\n        }\r\n    }\r\n    get(x: number, y: number): T | undefined {\r\n        return this.cells[x][y];\r\n    }\r\n    set(x: number, y: number, value: T | undefined) {\r\n        this.cells[x][y] = value;\r\n    }\r\n    remove(x: number, y: number) {\r\n        delete this.cells[x][y];\r\n    }\r\n    swap(x: number, y: number, x2: number, y2: number) {\r\n        const bufferA = this.get(x, y);\r\n        const bufferB = this.get(x2, y2);\r\n        this.set(x, y, bufferB);\r\n        this.set(x2, y2, bufferA);\r\n    }\r\n    fixCoords(x: number, y: number): [number, number] {\r\n        return [\r\n            fixNumber(0, this.width, x),\r\n            fixNumber(0, this.height, y),\r\n        ];\r\n    }\r\n    randCoords(): [number, number] {\r\n        return [\r\n            randInt(0, this.width),\r\n            randInt(0, this.height)\r\n        ];\r\n    }\r\n    randEmpty(): [number, number] {\r\n        let coords: [number, number];\r\n        do {\r\n            coords = this.randCoords();\r\n        } while (this.get(...coords));\r\n        return coords;\r\n    }\r\n}\r\n","import { interpolate, limNumber, randFloat, randInt } from \"./math-functions\";\r\n\r\nexport class Rgba {\r\n    private static readonly MAX_DIF = 255 * 4;\r\n    static randRgb(): Rgba {\r\n        return new Rgba(randInt(0, 256), randInt(0, 256), randInt(0, 256), 255);\r\n    }\r\n    constructor(\r\n        readonly red: number,\r\n        readonly green: number,\r\n        readonly blue: number,\r\n        readonly alpha: number\r\n    ) { }\r\n    interpolate(other: Rgba, t: number): Rgba {\r\n        return new Rgba(\r\n            interpolate(this.red, other.red, t),\r\n            interpolate(this.green, other.green, t),\r\n            interpolate(this.blue, other.blue, t),\r\n            interpolate(this.alpha, other.alpha, t)\r\n        );\r\n    }\r\n    normalise(): Rgba {\r\n        return new Rgba(\r\n            limNumber(0, 255, this.red),\r\n            limNumber(0, 255, this.green),\r\n            limNumber(0, 255, this.blue),\r\n            limNumber(0, 255, this.alpha)\r\n        );\r\n    }\r\n    mutateRgb(value: number): Rgba {\r\n        return new Rgba(\r\n            this.red + randFloat(-value, value),\r\n            this.green + randFloat(-value, value),\r\n            this.blue + randFloat(-value, value),\r\n            this.alpha\r\n        ).normalise();\r\n    }\r\n    difference(other: Rgba): number {\r\n        return ((\r\n            Math.abs(this.red - other.red) +\r\n            Math.abs(this.green - other.green) +\r\n            Math.abs(this.blue - other.blue) +\r\n            Math.abs(this.alpha - other.alpha)\r\n        ) / Rgba.MAX_DIF);\r\n    }\r\n}\r\n\r\nexport class Canvas {\r\n    readonly node: HTMLCanvasElement;\r\n    readonly ctx: CanvasRenderingContext2D;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        this.node = node || document.createElement(\"canvas\");\r\n        this.node.width = width;\r\n        this.node.height = height;\r\n        this.ctx = this.node.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    }\r\n}\r\n\r\nexport class PixelsData extends Canvas {\r\n    readonly data: ImageData;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        super(width, height, node);\r\n        this.data = this.ctx.getImageData(\r\n            0,\r\n            0,\r\n            this.node.width,\r\n            this.node.height\r\n        );\r\n    }\r\n    setPixel(x: number, y: number, color: Rgba) {\r\n        const POINTER = (y * this.data.width + x) * 4;\r\n        this.data.data[POINTER] = color.red;\r\n        this.data.data[POINTER + 1] = color.green;\r\n        this.data.data[POINTER + 2] = color.blue;\r\n        this.data.data[POINTER + 3] = color.alpha;\r\n    }\r\n    update() {\r\n        this.ctx.putImageData(this.data, 0, 0);\r\n        return this;\r\n    }\r\n}\r\n","export function* range(from: number, to: number) {\r\n    while (from < to) {\r\n        yield from++;\r\n    }\r\n}\r\n\r\nexport function randFloat(bottom: number, top: number) {\r\n    return Math.random() * (top - bottom) + bottom;\r\n}\r\n\r\nexport function randInt(bottom: number, top: number) {\r\n    return Math.floor(randFloat(bottom, top));\r\n}\r\n\r\nexport function randChoice<T>(arr: T[]): T {\r\n    return arr[randInt(0, arr.length)];\r\n}\r\n\r\nexport function fixNumber(min: number, max: number, number: number): number {\r\n    return number >= min ? number % max : max - (-number % max);\r\n}\r\n\r\nexport function normalizeNumber(\r\n    min: number,\r\n    max: number,\r\n    number: number\r\n): number {\r\n    return (number - min) / (max - min);\r\n}\r\n\r\nexport function limNumber(min: number, max: number, number: number): number {\r\n    return Math.max(Math.min(number, max), min);\r\n}\r\n\r\nexport function interpolate(a: number, b: number, t: number): number {\r\n    return a + (b - a) * t;\r\n}\r\n","import { Canvas, PixelsData, Rgba } from \"./drawing\";\r\nimport Grid from \"./Grid\";\r\nimport { fixNumber, randInt, range } from \"./math-functions\";\r\n\r\nexport const MOORE_NEIGHBOURHOOD: [number, number][] = [\r\n    [-1, -1],\r\n    [0, -1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, 1],\r\n    [-1, 1],\r\n    [-1, 0],\r\n];\r\n\r\nexport class Block {\r\n    constructor(\r\n        readonly world: World,\r\n        public x: number,\r\n        public y: number,\r\n        public color: Rgba\r\n    ) {\r\n        world.set(x, y, this);\r\n    }\r\n}\r\n\r\nexport class DynamicBlock extends Block {\r\n    alive: boolean;\r\n    constructor(world: World, x: number, y: number, color: Rgba) {\r\n        super(world, x, y, color);\r\n        world.assign(this);\r\n        this.alive = true;\r\n    }\r\n    onStep() {\r\n\r\n    }\r\n    onDie() {\r\n\r\n    }\r\n}\r\n\r\nexport class World extends Grid<Block | undefined> {\r\n    private readonly img: Canvas;\r\n    private dynamic: { a: any; b: any; };\r\n    age: number;\r\n    constructor(\r\n        readonly width: number,\r\n        readonly height: number,\r\n        pixelSize: number,\r\n        node: HTMLCanvasElement\r\n    ) {\r\n        super(width, height);\r\n        this.img = new Canvas(width * pixelSize, height * pixelSize, node);\r\n        this.img.ctx.imageSmoothingEnabled = false;\r\n        this.dynamic = { a: {}, b: {} };\r\n        this.age = 0;\r\n    }\r\n    set(x: number, y: number, block: Block | undefined) {\r\n        super.set(x, y, block);\r\n        if (block) {\r\n            block.x = x;\r\n            block.y = y;\r\n        }\r\n    }\r\n    drawLayer(layer: CanvasImageSource) {\r\n        this.img.ctx.drawImage(\r\n            layer,\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    clearImage() {\r\n        this.img.ctx.clearRect(\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    visualize(func: (block: any | undefined, x: number, y: number) => Rgba | null) {\r\n        let img = new PixelsData(this.width, this.height);\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                const col = func(this.get(x, y), x, y);\r\n                if (col) {\r\n                    img.setPixel(x, y, col);\r\n                }\r\n            }\r\n        }\r\n        this.drawLayer(img.update().node);\r\n    }\r\n    assign(block: DynamicBlock) {\r\n        let i: number;\r\n        do {\r\n            i = randInt(0, this.width * this.height * 1000);\r\n        } while (this.dynamic.a[i]);\r\n        this.dynamic.a[i] = block;\r\n    }\r\n    init() {\r\n        this.dynamic.b = this.dynamic.a;\r\n    }\r\n    step() {\r\n        this.dynamic.a = {};\r\n        for (const key in this.dynamic.b) {\r\n            const block: DynamicBlock = this.dynamic.b[key];\r\n            if (!block.alive) {\r\n                this.set(block.x, block.y, undefined);\r\n                block.onDie();\r\n            } else {\r\n                block.onStep();\r\n                this.assign(block);\r\n            }\r\n        }\r\n        this.dynamic.b = this.dynamic.a;\r\n        this.age++;\r\n    }\r\n}\r\n","import Bot, { Genome } from \"./lib/Bot\";\r\nimport { PixelsData, Rgba } from \"./lib/drawing\";\r\nimport Grid from \"./lib/Grid\";\r\nimport { limNumber, normalizeNumber } from \"./lib/math-functions\";\r\nimport { Block, MOORE_NEIGHBOURHOOD, World } from \"./lib/world\";\r\n\r\nfunction onResizeWindow() {\r\n    (document.querySelector('.wrapper') as HTMLElement).style.maxHeight = `${window.innerHeight}px`;\r\n}\r\n\r\nfunction start() {\r\n\r\n    Bot.amount = 0;\r\n\r\n    world = new World(\r\n        parseInt((document.querySelector('#input-width') as HTMLInputElement).value),\r\n        parseInt((document.querySelector('#input-height') as HTMLInputElement).value),\r\n        parseInt((document.querySelector('#input-pixel') as HTMLInputElement).value),\r\n        document.querySelector('#img') as HTMLCanvasElement\r\n    );\r\n\r\n    const BOTS_AMOUNT = parseInt((document.querySelector('#input-bots') as HTMLInputElement).value);\r\n\r\n    for (let i = 0; i < Math.min(world.width * world.height, BOTS_AMOUNT); i++) {\r\n        const a = new Bot(\r\n            world,\r\n            ...world.randEmpty(),\r\n            new Rgba(100, 100, 100, 255),\r\n            100,\r\n            new Genome(64).fillRandom(),\r\n            Rgba.randRgb(),\r\n            { photo: 0.5, attack: 0.5 }\r\n        );\r\n    }\r\n\r\n    world.init();\r\n}\r\n\r\nfunction drawColors(block: any) {\r\n    if (block instanceof Block) {\r\n        return block.color;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawEnergy(block: any) {\r\n    if (block instanceof Bot) {\r\n        return new Rgba(20, 20, 100, 255)\r\n            .interpolate(\r\n                new Rgba(255, 255, 0, 255),\r\n                block.energy / 100\r\n            );\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawAbilities(block: any) {\r\n    if (block instanceof Bot) {\r\n        return new Rgba(\r\n            normalizeNumber(0.5, 1, block.abilities.attack) * 255,\r\n            normalizeNumber(0.5, 1, block.abilities.photo) * 255,\r\n            50,\r\n            255\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawFamilies(block: any) {\r\n    if (block instanceof Bot) {\r\n        return block.family;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawLastAction(block: any) {\r\n    if (block instanceof Bot) {\r\n        return block.lastAction;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction getNarrowImg(world: World): HTMLCanvasElement {\r\n    const img = new PixelsData(world.width * 3, world.height * 3);\r\n    for (let x = 0; x < world.width; x++) {\r\n        for (let y = 0; y < world.height; y++) {\r\n            const block = world.get(x, y);\r\n            if (block instanceof Bot) {\r\n                const xy: [number, number] = [\r\n                    block.x * 3 + 1 + MOORE_NEIGHBOURHOOD[block.narrow][0],\r\n                    block.y * 3 + 1 + MOORE_NEIGHBOURHOOD[block.narrow][1],\r\n                ];\r\n                img.setPixel(...xy, new Rgba(0, 0, 0, 255));\r\n            }\r\n        }\r\n    }\r\n    img.update();\r\n    return img.node;\r\n}\r\n\r\nlet world: World;\r\n\r\nwindow.addEventListener('resize', onResizeWindow);\r\n\r\nonResizeWindow();\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    document.querySelector('#input-width')?.addEventListener('change', e => {\r\n        const target = e.target as HTMLInputElement;\r\n        target.value = limNumber(1, 2048, parseInt(target.value)).toString();\r\n    });\r\n\r\n    document.querySelector('#input-height')?.addEventListener('change', e => {\r\n        const target = e.target as HTMLInputElement;\r\n        target.value = limNumber(1, 2024, parseInt(target.value)).toString();\r\n    });\r\n\r\n    document.querySelector('#input-pixel')?.addEventListener('change', e => {\r\n        const target = e.target as HTMLInputElement;\r\n        target.value = limNumber(1, 50, parseInt(target.value)).toString();\r\n    });\r\n\r\n    const $btnMenu = document.querySelector('#btn-menu') as HTMLInputElement;\r\n    const $imgContainer = document.querySelector('#img-container') as HTMLElement;\r\n    const $img = document.querySelector('#img') as HTMLElement;\r\n\r\n    // const $fpsLimit = document.querySelector('#fps-limit') as HTMLInputElement;\r\n    // $fpsLimit.addEventListener('input', () => {\r\n    //     $fpsLimit.value = limNumber(1, 250, parseInt($fpsLimit.value) || 60).toString();\r\n    // });\r\n\r\n    $btnMenu.addEventListener('change', () => {\r\n        if ($btnMenu.checked) {\r\n            $imgContainer.classList.add('img-wrapper--menu-opened');\r\n            document.querySelector('#menu')?.classList.add('wrapper__menu--menu-opened');\r\n        } else {\r\n            $imgContainer.classList.remove('img-wrapper--menu-opened');\r\n            document.querySelector('#menu')?.classList.remove('wrapper__menu--menu-opened');\r\n        }\r\n    })\r\n\r\n    let currentX: number;\r\n    let currentY: number;\r\n    let initialX: number;\r\n    let initialY: number;\r\n    let xOffset = 0;\r\n    let yOffset = 0;\r\n    let active = false;\r\n\r\n    function dragStart(e: TouchEvent | MouseEvent) {\r\n        if (e instanceof TouchEvent) {\r\n            initialX = e.touches[0].clientX - xOffset;\r\n            initialY = e.touches[0].clientY - yOffset;\r\n        } else {\r\n            initialX = e.clientX - xOffset;\r\n            initialY = e.clientY - yOffset;\r\n        }\r\n        if (e.target === $img) {\r\n            active = true;\r\n        }\r\n    }\r\n\r\n    function dragEnd() {\r\n        initialX = currentX;\r\n        initialY = currentY;\r\n        active = false;\r\n    }\r\n\r\n    function drag(e: TouchEvent | MouseEvent) {\r\n        if (active) {\r\n            e.preventDefault();\r\n            if (e instanceof TouchEvent) {\r\n                currentX = e.touches[0].clientX - initialX;\r\n                currentY = e.touches[0].clientY - initialY;\r\n            } else {\r\n                currentX = e.clientX - initialX;\r\n                currentY = e.clientY - initialY;\r\n            }\r\n            xOffset = currentX;\r\n            yOffset = currentY;\r\n            $img.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;\r\n        }\r\n    }\r\n\r\n    $imgContainer.addEventListener(\"touchstart\", dragStart, false);\r\n    $imgContainer.addEventListener(\"touchend\", dragEnd, false);\r\n    $imgContainer.addEventListener(\"touchmove\", drag, false);\r\n\r\n    $imgContainer.addEventListener(\"mousedown\", dragStart, false);\r\n    $imgContainer.addEventListener(\"mouseup\", dragEnd, false);\r\n    $imgContainer.addEventListener(\"mousemove\", drag, false);\r\n\r\n    const $amount = document.querySelector('#amount') as HTMLElement;\r\n    const $fps = document.querySelector('#fps') as HTMLElement;\r\n    const $frameNumber = document.querySelector('#frame-number') as HTMLElement;\r\n    const $viewMode = document.querySelector('#view-mode') as HTMLSelectElement;\r\n    const $narrows = document.querySelector('#chbx-narrows') as HTMLInputElement;\r\n    document.querySelector('#btn-start')?.addEventListener('click', start);\r\n    const $btnPause = document.querySelector('#btn-pause') as HTMLButtonElement;\r\n    $btnPause.addEventListener('click', (e) => {\r\n        switch (paused) {\r\n            case true:\r\n                paused = false;\r\n                break;\r\n            case false:\r\n                paused = true;\r\n                break;\r\n        }\r\n    });\r\n    start();\r\n\r\n    let lastLoop = Date.now();\r\n    let fps = 0;\r\n    let paused = false;\r\n    // setInterval(() => {\r\n    //     if (Date.now() - lastLoop > 1000) {\r\n    //         $fps.innerHTML = fps.toFixed(0);\r\n    //         fps = 0;\r\n    //         lastLoop = Date.now();\r\n    //     }\r\n    //     fps++;\r\n    //     if (!paused) world.step();\r\n    //     switch ($viewMode.value) {\r\n    //         case 'normal': world.clearImage(); world.visualize(drawColors); break;\r\n    //         case 'energy': world.clearImage(); world.visualize(drawEnergy); break;\r\n    //         case 'families': world.clearImage(); world.visualize(drawFamilies); break;\r\n    //         case 'abilities': world.clearImage(); world.visualize(drawAbilities); break;\r\n    //         case 'last-action': world.clearImage(); world.visualize(drawLastAction); break;\r\n    //         default: break;\r\n    //     }\r\n    //     if (!($viewMode.value === 'disabled') && $narrows.checked) {\r\n    //         world.drawLayer(getNarrowImg(world));\r\n    //     }\r\n    //     $amount.innerHTML = Bot.amount.toString();\r\n    //     // $fps.innerHTML = fps.toFixed(0);\r\n    // });\r\n\r\n    (function step() {\r\n        if (Date.now() - lastLoop > 1000) {\r\n            $fps.innerHTML = fps.toFixed(0);\r\n            fps = 0;\r\n            lastLoop = Date.now();\r\n        }\r\n        fps++;\r\n        if (!paused) world.step();\r\n        switch ($viewMode.value) {\r\n            case 'normal': world.clearImage(); world.visualize(drawColors); break;\r\n            case 'energy': world.clearImage(); world.visualize(drawEnergy); break;\r\n            case 'families': world.clearImage(); world.visualize(drawFamilies); break;\r\n            case 'abilities': world.clearImage(); world.visualize(drawAbilities); break;\r\n            case 'last-action': world.clearImage(); world.visualize(drawLastAction); break;\r\n            default: break;\r\n        }\r\n        if (!($viewMode.value === 'disabled') && $narrows.checked) {\r\n            world.drawLayer(getNarrowImg(world));\r\n        }\r\n        $amount.innerHTML = Bot.amount.toString();\r\n        $frameNumber.innerHTML = `${(world.age / 1000).toFixed(1)} тыс. кадров`;\r\n        setTimeout(step);\r\n    })();\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}