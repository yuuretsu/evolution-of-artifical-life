{"version":3,"sources":["webpack://artifical-life/./src/lib/Bot.ts","webpack://artifical-life/./src/lib/Grid.ts","webpack://artifical-life/./src/lib/drawing.ts","webpack://artifical-life/./src/lib/math-functions.ts","webpack://artifical-life/./src/lib/view-modes.ts","webpack://artifical-life/./src/lib/world.ts","webpack://artifical-life/./src/main.ts","webpack://artifical-life/webpack/bootstrap","webpack://artifical-life/webpack/startup"],"names":["world","x","y","color","energy","genome","family","abilities","Bot","amount","_narrow","randInt","age","lastAction","name","Rgba","this","n","fixNumber","narrowToCoords","MOORE_NEIGHBOURHOOD","narrow","fixCoords","getForvard","coords","block","get","moveTo","swap","multiplyTo","interpolate","replication","mutateRgb","randMove","onStep","alive","doAction","onDie","DynamicBlock","bot","length","genes","_pointer","randGene","action","randChoice","GENE_TEMPLATES","property","Math","random","branches","mutateGene","gene","limNumber","randFloat","map","i","fillRandom","start","create","fillPlant","Genome","GENE","pointer","RESULT","goto","completed","photo","min","attack","max","forward","E","difference","DeadBot","width","height","cells","set","value","remove","x2","y2","bufferA","bufferB","randCoords","randEmpty","red","green","blue","alpha","randRgb","other","t","normalise","abs","MAX_DIF","node","document","createElement","ctx","getContext","Canvas","data","getImageData","setPixel","POINTER","update","putImageData","PixelsData","bottom","top","floor","from","to","arr","number","a","b","Block","divider","normalizeNumber","options","img","xy","assign","pixelSize","imageSmoothingEnabled","dynamic","drawLayer","layer","drawImage","clearImage","clearRect","visualize","func","col","init","step","key","undefined","World","window","addEventListener","currentX","currentY","initialX","initialY","parseInt","$inputWidth","$inputHeight","$inputPixel","$img","BOTS_AMOUNT","$inputBots","updateImage","Date","now","lastLoop","$fps","innerText","fps","toFixed","$chbxUpdImg","checked","$amount","innerHTML","toString","$frameNumber","$viewMode","drawColors","drawEnergy","$rangeViewEnergy","drawAges","drawFamilies","drawAbilities","drawLastAction","viewActionsOptions","$chbxNarrows","getNarrowImg","onChangePause","$chbxPause","clearInterval","intervalId","disabled","nextElementSibling","setInterval","dragStart","e","TouchEvent","touches","clientX","xOffset","clientY","yOffset","target","active","dragEnd","drag","preventDefault","style","transform","$imgContainer","querySelector","event","classList","add","$viewModeOptionsBlock","Array","children","forEach","element","id","viewActionsOptionsList","actionName","push","querySelectorAll","join","checkbox","chbx","elem","maxHeight","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"yrBAAA,aACA,SACA,SAEA,cAKI,WACIA,EACAC,EACAC,EACAC,EACOC,EACAC,EACAC,EACAC,GARX,MAaI,YAAMP,EAAOC,EAAGC,EAAGC,IAAM,K,OARlB,EAAAC,SACA,EAAAC,SACA,EAAAC,SACA,EAAAC,YAMPC,EAAIC,SACJ,EAAKC,QAAU,EAAAC,QAAQ,EAAG,GAC1B,EAAKC,IAAM,EACX,EAAKC,WAAa,CAAEC,KAAM,OAAQX,MAAO,IAAI,EAAAY,KAAK,GAAI,GAAI,GAAI,M,EAqDtE,OA3EiC,OAwB7B,sBAAI,qBAAM,C,IAGV,WACI,OAAOC,KAAKN,S,IAJhB,SAAWO,GACPD,KAAKN,QAAU,EAAAQ,UAAU,EAAG,EAAGD,I,gCAKnC,YAAAE,eAAA,WACI,IAAMlB,EAAIe,KAAKf,EAAI,EAAAmB,oBAAoBJ,KAAKK,QAAQ,GAC9CnB,EAAIc,KAAKd,EAAI,EAAAkB,oBAAoBJ,KAAKK,QAAQ,GACpD,OAAOL,KAAKhB,MAAMsB,UAAUrB,EAAGC,IAEnC,YAAAqB,WAAA,W,MACUC,EAASR,KAAKG,iBACpB,MAAO,CAAEM,OAAO,EAAAT,KAAKhB,OAAM0B,IAAG,QAAIF,GAASA,OAAQA,IAEvD,YAAAG,OAAA,SAAO1B,EAAWC,GACdc,KAAKhB,MAAM4B,KAAKZ,KAAKf,EAAGe,KAAKd,EAAGD,EAAGC,IAEvC,YAAA2B,WAAA,SAAW5B,EAAWC,GAClB,IAAIM,EACAQ,KAAKhB,MACLC,EACAC,EACAc,KAAKb,MAAM2B,YAAY,IAAI,EAAAf,KAAK,IAAK,IAAK,IAAK,KAAM,KACrDC,KAAKZ,OAAS,EACdY,KAAKX,OAAO0B,cACZf,KAAKV,OAAO0B,UAAU,IAAG,KACpBhB,KAAKT,YAEdS,KAAKZ,QAAU,GAEnB,YAAA6B,SAAA,WACI,IAAMT,EAASR,KAAKhB,MAAMsB,UACtBN,KAAKf,EAAI,EAAAU,SAAS,EAAG,GACrBK,KAAKd,EAAI,EAAAS,SAAS,EAAG,IAEzBK,KAAKW,OAAM,MAAXX,KAAeQ,IAEnB,YAAAU,OAAA,WACQlB,KAAKZ,OAAS,GAAKY,KAAKZ,OAAS,KAAOY,KAAKJ,IAAM,IACnDI,KAAKmB,OAAQ,GAGjBnB,KAAKX,OAAO+B,SAASpB,MACrBA,KAAKZ,QAAU,GACfY,KAAKJ,KAAO,IAEhB,YAAAyB,MAAA,WACI7B,EAAIC,UAvED,EAAAA,OAAS,EA0EpB,EA3EA,CAAiC,EAAA6B,c,UAAZ9B,EA6ErB,kBAEI,WAAY+B,GAAZ,MACI,YAAMA,EAAIvC,MAAOuC,EAAItC,EAAGsC,EAAIrC,EAAGqC,EAAIpC,MAAM2B,YAAY,IAAI,EAAAf,KAAK,EAAG,EAAG,EAAG,KAAM,MAAK,K,OAClF,EAAKH,IAAM,E,EASnB,OAbsB,OAMlB,YAAAsB,OAAA,WACQlB,KAAKJ,IAAM,MACXI,KAAKmB,OAAQ,GAEjBnB,KAAKb,MAAQa,KAAKb,MAAM2B,YAAY,IAAI,EAAAf,KAAK,GAAI,GAAI,GAAI,KAAM,MAC/DC,KAAKJ,OAEb,EAbA,CAAsB,EAAA0B,cAetB,aAGI,WAAqBE,GAAA,KAAAA,SACjBxB,KAAKyB,MAAQ,GACbzB,KAAK0B,SAAW,EAmGxB,OAjGI,sBAAI,sBAAO,C,IAGX,WACI,OAAO1B,KAAK0B,U,IAJhB,SAAYzB,GACRD,KAAK0B,SAAW,EAAAxB,UAAU,EAAGF,KAAKwB,OAAQvB,I,gCAK9C,YAAA0B,SAAA,WACI,MAAO,CACHC,OAAQ,EAAAC,WAAWC,GACnBC,SAAUC,KAAKC,SACfC,SAAU,CACN,EAAAvC,QAAQ,EAAGK,KAAKwB,QAChB,EAAA7B,QAAQ,EAAGK,KAAKwB,QAChB,EAAA7B,QAAQ,EAAGK,KAAKwB,QAChB,EAAA7B,QAAQ,EAAGK,KAAKwB,WAI5B,YAAAW,WAAA,SAAWC,GAAX,WACI,MAAO,CACHR,OAAQI,KAAKC,SAAW,GAAM,EAAAJ,WAAWC,GAAkBM,EAAKR,OAChEG,SAAU,EAAAM,UAAU,EAAG,EAAGD,EAAKL,SAAW,EAAAO,WAAW,IAAM,MAC3DJ,SAAUE,EAAKF,SAASK,KACpB,SAAAC,GAAK,OAAAR,KAAKC,SAAW,GACf,EAAAtC,QAAQ,EAAG,EAAK6B,QAChBgB,OAIlB,YAAAC,WAAA,SAAWC,QAAA,IAAAA,MAAA,GACP,IAAK,IAAIF,EAAIE,EAAOF,EAAIxC,KAAKwB,OAAQgB,IACjCxC,KAAKyB,MAAMe,GAAKxC,KAAK2B,WAEzB,OAAO3B,MAEX,YAAA2C,OAAA,SAAOlB,GACH,IAAK,IAAIe,EAAI,EAAGA,EAAIf,EAAMD,OAAQgB,IAC9BxC,KAAKyB,MAAMe,GAAKf,EAAMe,GAG1B,OADAxC,KAAKyC,WAAWhB,EAAMD,QACfxB,MAEX,YAAA4C,UAAA,WACI,IAAK,IAAIJ,EAAI,EAAGA,EAAIxC,KAAKwB,OAAQgB,IAC7BxC,KAAKyB,MAAMe,GAAK,CACZZ,OAAQE,EAAe,EAAAnC,QAAQ,EAAG,IAClCoC,SAAUC,KAAKC,SACfC,SAAU,CACN,EAAAvC,QAAQ,EAAGK,KAAKwB,QAChB,EAAA7B,QAAQ,EAAGK,KAAKwB,QAChB,EAAA7B,QAAQ,EAAGK,KAAKwB,QAChB,EAAA7B,QAAQ,EAAGK,KAAKwB,UAI5B,OAAOxB,MAkBX,YAAAe,YAAA,WAEI,IADA,IAAM1B,EAAS,IAAIwD,EAAO7C,KAAKwB,QACtBgB,EAAI,EAAGA,EAAIxC,KAAKwB,OAAQgB,IAC7BnD,EAAOoC,MAAMe,GAAKR,KAAKC,SAAW,KAC5BjC,KAAKmC,WAAWnC,KAAKyB,MAAMe,IAC3BxC,KAAKyB,MAAMe,GAErB,OAAOnD,GAEX,YAAA+B,SAAA,SAASG,GAEL,IAAK,IAAIiB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMM,EAAa9C,KAAKyB,MAAMzB,KAAK+C,SAC7BC,EAASF,EAAKlB,OAAOL,EAAKuB,EAAKf,SAAUe,EAAKZ,UAMpD,GALIc,EAAOC,KACPjD,KAAK+C,QAAUC,EAAOC,KAEtBjD,KAAK+C,UAELC,EAAOE,UAAW,OAE1B3B,EAAI1B,WAAa,CAAEC,KAAM,kBAAmBX,MAAO,IAAI,EAAAY,KAAK,GAAI,GAAI,GAAI,MACxEwB,EAAIpC,MAAQoC,EAAIpC,MAAM2B,YAAY,IAAI,EAAAf,KAAK,IAAK,IAAK,IAAK,KAAM,KAExE,EAxGA,GAAa,EAAA8C,SAwHb,IAAMf,EAA6B,CAE/B,SAACP,EAAKQ,EAAUG,GACZ,MAAO,CAAEgB,WAAW,EAAOD,KAAM,IAIrC,SAAC1B,EAAKQ,EAAUG,GAMZ,OALAX,EAAInC,QAAU,GAAM,SAAAmC,EAAIhC,UAAU4D,MAAS,GAC3C5B,EAAIhC,UAAU4D,MAAQnB,KAAKoB,IAAI,EAAG7B,EAAIhC,UAAU4D,MAAQ,KACxD5B,EAAIhC,UAAU8D,OAASrB,KAAKsB,IAAI,EAAG/B,EAAIhC,UAAU8D,OAAS,KAC1D9B,EAAIpC,MAAQoC,EAAIpC,MAAM2B,YAAY,IAAI,EAAAf,KAAK,EAAG,IAAK,EAAG,KAAM,KAC5DwB,EAAI1B,WAAa,CAAEC,KAAM,sBAAuBX,MAAO,IAAI,EAAAY,KAAK,EAAG,IAAK,EAAG,MACpE,CAAEmD,WAAW,IAIxB,SAAC3B,EAAKQ,EAAUG,GAMZ,OALIH,EAAW,GACXR,EAAIlB,SAEJkB,EAAIlB,SAED,CAAE6C,WAAW,IAIxB,SAAC3B,EAAKQ,EAAUG,GACZ,IAAMqB,EAAUhC,EAAIhB,aAMpB,OALKgD,EAAQ9C,OAASc,EAAI3B,IAAM,IAC5B2B,EAAIV,WAAU,MAAdU,EAAkBgC,EAAQ/C,QAC1Be,EAAI1B,WAAa,CAAEC,KAAM,gBAAiBX,MAAO,IAAI,EAAAY,KAAK,EAAG,EAAG,IAAK,OAGlE,CAAEmD,WAAW,IAIxB,SAAC3B,EAAKQ,EAAUG,GACZX,EAAIpC,MAAQoC,EAAIpC,MAAM2B,YAAY,IAAI,EAAAf,KAAK,EAAG,EAAG,IAAK,KAAM,MAC5D,IAAMwD,EAAUhC,EAAIhB,aACpB,GAAIgD,EAAQ9C,iBAAiBjB,GAAO+D,EAAQ9C,MAAMrB,OAASmC,EAAInC,OAAQ,CACnE,IAAMoE,GAAKD,EAAQ9C,MAAMrB,OAASmC,EAAInC,QAAU,EAChDmC,EAAInC,OAASoE,EACbD,EAAQ9C,MAAMrB,OAASoE,EACvBjC,EAAI1B,WAAa,CAAEC,KAAM,oBAAqBX,MAAO,IAAI,EAAAY,KAAK,EAAG,IAAK,IAAK,MAG/E,MAAO,CAAEmD,WAAW,IAIxB,SAAC3B,EAAKQ,EAAUG,GAEZ,IAAMqB,EAAUhC,EAAIhB,aACpB,OAAIgD,EAAQ9C,iBAAiBjB,EACrB+D,EAAQ9C,MAAMnB,OAAOmE,WAAWlC,EAAIpC,OAAS4C,EACtC,CAAEmB,WAAW,EAAOD,KAAMf,EAAS,IAEnC,CAAEgB,WAAW,EAAOD,KAAMf,EAAS,IAEvCqB,EAAQ9C,iBAAiBiD,EACzB,CAAER,WAAW,EAAOD,KAAMf,EAAS,IAEnC,CAAEgB,WAAW,EAAOD,KAAMf,EAAS,KAIlD,SAACX,EAAKQ,EAAUG,GACZ,OAAIX,EAAInC,OAAS,IAAM2C,EACZ,CAAEmB,WAAW,EAAOD,KAAMf,EAAS,IAEnC,CAAEgB,WAAW,EAAOD,KAAMf,EAAS,KAKlD,SAACX,EAAKQ,EAAUG,GAEZ,IAAMqB,EAAUhC,EAAIhB,aAMpB,OALIgD,EAAQ9C,iBAAiBiD,GAAWH,EAAQ9C,MAAMb,IAAM,IACxD2D,EAAQ9C,MAAMU,OAAQ,GAInB,CAAE+B,WAAW,IAIxB,SAAC3B,EAAKQ,EAAUG,GAEZ,IAAMqB,EAAUhC,EAAIhB,aAGpB,OAFKgD,EAAQ9C,OAAOc,EAAIZ,OAAM,MAAVY,EAAcgC,EAAQ/C,QAC1Ce,EAAI1B,WAAa,CAAEC,KAAM,YAAaX,MAAO,IAAI,EAAAY,KAAK,IAAK,IAAK,IAAK,MAC9D,CAAEmD,WAAW,IAaxB,SAAC3B,EAAKQ,EAAUG,GACZX,EAAInC,QAAU,GACdmC,EAAIpC,MAAQoC,EAAIpC,MAAM2B,YAAY,IAAI,EAAAf,KAAK,IAAK,EAAG,EAAG,KAAM,KAC5DwB,EAAIhC,UAAU8D,OAASrB,KAAKoB,IAAI,EAAG7B,EAAIhC,UAAU8D,OAAS,KAC1D9B,EAAIhC,UAAU4D,MAAQnB,KAAKsB,IAAI,EAAG/B,EAAIhC,UAAU4D,MAAQ,KACxD,IAAMI,EAAUhC,EAAIhB,aACpB,GAAIgD,EAAQ9C,iBAAiBjB,EAAK,CAC9B,IAAMgE,EAAKD,EAAQ9C,MAAMrB,OAAS,EAAK,SAAAmC,EAAIhC,UAAU8D,OAAU,GAC/DE,EAAQ9C,MAAMrB,QAAUmE,EAAQ9C,MAAMrB,OAAS,EAC/CmC,EAAInC,QAAUoE,EACdjC,EAAI1B,WAAa,CAAEC,KAAM,cAAeX,MAAO,IAAI,EAAAY,KAAK,IAAK,EAAG,EAAG,MAGvE,MAAO,CAAEmD,WAAW,M,+DChV5B,aAEA,aAEI,WAAqBS,EAAwBC,GAAxB,KAAAD,QAAwB,KAAAC,SACzC5D,KAAK6D,MAAQ,GACb,IAAK,IAAI5E,EAAI,EAAGA,EAAI0E,EAAO1E,IACvBe,KAAK6D,MAAM5E,GAAK,GAqC5B,OAlCI,YAAAyB,IAAA,SAAIzB,EAAWC,GACX,OAAOc,KAAK6D,MAAM5E,GAAGC,IAEzB,YAAA4E,IAAA,SAAI7E,EAAWC,EAAW6E,GACtB/D,KAAK6D,MAAM5E,GAAGC,GAAK6E,GAEvB,YAAAC,OAAA,SAAO/E,EAAWC,UACPc,KAAK6D,MAAM5E,GAAGC,IAEzB,YAAA0B,KAAA,SAAK3B,EAAWC,EAAW+E,EAAYC,GACnC,IAAMC,EAAUnE,KAAKU,IAAIzB,EAAGC,GACtBkF,EAAUpE,KAAKU,IAAIuD,EAAIC,GAC7BlE,KAAK8D,IAAI7E,EAAGC,EAAGkF,GACfpE,KAAK8D,IAAIG,EAAIC,EAAIC,IAErB,YAAA7D,UAAA,SAAUrB,EAAWC,GACjB,MAAO,CACH,EAAAgB,UAAU,EAAGF,KAAK2D,MAAO1E,GACzB,EAAAiB,UAAU,EAAGF,KAAK4D,OAAQ1E,KAGlC,YAAAmF,WAAA,WACI,MAAO,CACH,EAAA1E,QAAQ,EAAGK,KAAK2D,OAChB,EAAAhE,QAAQ,EAAGK,KAAK4D,UAGxB,YAAAU,UAAA,WACI,IAAI9D,EACJ,GACIA,EAASR,KAAKqE,mBACTrE,KAAKU,IAAG,MAARV,KAAYQ,IACrB,OAAOA,GAEf,EA1CA,G,4dCFA,aAEA,aAKI,WACa+D,EACAC,EACAC,EACAC,GAHA,KAAAH,MACA,KAAAC,QACA,KAAAC,OACA,KAAAC,QAkCjB,OAzCW,EAAAC,QAAP,WACI,OAAO,IAAI5E,EAAK,EAAAJ,QAAQ,EAAG,KAAM,EAAAA,QAAQ,EAAG,KAAM,EAAAA,QAAQ,EAAG,KAAM,MAQvE,YAAAmB,YAAA,SAAY8D,EAAaC,GACrB,OAAO,IAAI9E,EACP,EAAAe,YAAYd,KAAKuE,IAAKK,EAAML,IAAKM,GACjC,EAAA/D,YAAYd,KAAKwE,MAAOI,EAAMJ,MAAOK,GACrC,EAAA/D,YAAYd,KAAKyE,KAAMG,EAAMH,KAAMI,GACnC,EAAA/D,YAAYd,KAAK0E,MAAOE,EAAMF,MAAOG,KAG7C,YAAAC,UAAA,WACI,OAAO,IAAI/E,EACP,EAAAsC,UAAU,EAAG,IAAKrC,KAAKuE,KACvB,EAAAlC,UAAU,EAAG,IAAKrC,KAAKwE,OACvB,EAAAnC,UAAU,EAAG,IAAKrC,KAAKyE,MACvB,EAAApC,UAAU,EAAG,IAAKrC,KAAK0E,SAG/B,YAAA1D,UAAA,SAAU+C,GACN,OAAO,IAAIhE,EACPC,KAAKuE,IAAM,EAAAjC,WAAWyB,EAAOA,GAC7B/D,KAAKwE,MAAQ,EAAAlC,WAAWyB,EAAOA,GAC/B/D,KAAKyE,KAAO,EAAAnC,WAAWyB,EAAOA,GAC9B/D,KAAK0E,OACPI,aAEN,YAAArB,WAAA,SAAWmB,GACP,OACI5C,KAAK+C,IAAI/E,KAAKuE,IAAMK,EAAML,KAC1BvC,KAAK+C,IAAI/E,KAAKwE,MAAQI,EAAMJ,OAC5BxC,KAAK+C,IAAI/E,KAAKyE,KAAOG,EAAMH,MAC3BzC,KAAK+C,IAAI/E,KAAK0E,MAAQE,EAAMF,QAC5B3E,EAAKiF,SAxCW,EAAAA,QAAU,KA0CtC,EA3CA,GAAa,EAAAjF,OA6Cb,MAGI,SAAY4D,EAAeC,EAAgBqB,GACvCjF,KAAKiF,KAAOA,GAAQC,SAASC,cAAc,UAC3CnF,KAAKiF,KAAKtB,MAAQA,EAClB3D,KAAKiF,KAAKrB,OAASA,EACnB5D,KAAKoF,IAAMpF,KAAKiF,KAAKI,WAAW,OAP3B,EAAAC,SAWb,kBAEI,WAAY3B,EAAeC,EAAgBqB,GAA3C,MACI,YAAMtB,EAAOC,EAAQqB,IAAK,K,OAC1B,EAAKM,KAAO,EAAKH,IAAII,aACjB,EACA,EACA,EAAKP,KAAKtB,MACV,EAAKsB,KAAKrB,Q,EActB,OAtBgC,OAW5B,YAAA6B,SAAA,SAASxG,EAAWC,EAAWC,GAC3B,IAAMuG,EAAsC,GAA3BxG,EAAIc,KAAKuF,KAAK5B,MAAQ1E,GACvCe,KAAKuF,KAAKA,KAAKG,GAAWvG,EAAMoF,IAChCvE,KAAKuF,KAAKA,KAAKG,EAAU,GAAKvG,EAAMqF,MACpCxE,KAAKuF,KAAKA,KAAKG,EAAU,GAAKvG,EAAMsF,KACpCzE,KAAKuF,KAAKA,KAAKG,EAAU,GAAKvG,EAAMuF,OAExC,YAAAiB,OAAA,WAEI,OADA3F,KAAKoF,IAAIQ,aAAa5F,KAAKuF,KAAM,EAAG,GAC7BvF,MAEf,EAtBA,CAAgCsF,GAAnB,EAAAO,c,qlCCpDb,SAAgBvD,EAAUwD,EAAgBC,GACtC,OAAO/D,KAAKC,UAAY8D,EAAMD,GAAUA,EAG5C,SAAgBnG,EAAQmG,EAAgBC,GACpC,OAAO/D,KAAKgE,MAAM1D,EAAUwD,EAAQC,I,2JAXxC,iBAAuBE,EAAcC,G,yDAC1BD,EAAOC,EACV,GAAMD,KADM,M,cACZ,S,4BAIR,cAIA,YAIA,sBAA8BE,GAC1B,OAAOA,EAAIxG,EAAQ,EAAGwG,EAAI3E,UAG9B,qBAA0B4B,EAAaE,EAAa8C,GAChD,OAAOA,GAAUhD,EAAMgD,EAAS9C,EAAMA,IAAQ8C,EAAS9C,GAG3D,2BACIF,EACAE,EACA8C,GAEA,OAAQA,EAAShD,IAAQE,EAAMF,IAGnC,qBAA0BA,EAAaE,EAAa8C,GAChD,OAAOpE,KAAKsB,IAAItB,KAAKoB,IAAIgD,EAAQ9C,GAAMF,IAG3C,uBAA4BiD,EAAWC,EAAWzB,GAC9C,OAAOwB,GAAKC,EAAID,GAAKxB,I,uYCnCzB,aACA,SACA,SACA,SAEA,sBAA2BpE,GACvB,OAAIA,aAAiB,EAAA8F,MACV9F,EAAMtB,MAEV,MAcX,sBAA2BqH,GACvB,OAAO,SAAA/F,GACH,OAAOA,aAAiB,UAClB,IAAI,EAAAV,KAAK,EAAG,EAAG,GAAI,KAChBe,YACG,IAAI,EAAAf,KAAK,IAAK,IAAK,EAAG,KACtBU,EAAMrB,OAASoH,GAErB,OAId,yBAA8B/F,GAC1B,OAAIA,aAAiB,UACV,IAAI,EAAAV,KAC2C,IAAlD,EAAA0G,gBAAgB,GAAK,EAAGhG,EAAMlB,UAAU8D,QACS,IAAjD,EAAAoD,gBAAgB,GAAK,EAAGhG,EAAMlB,UAAU4D,OACxC,GACA,KAGD,MAGX,wBAA6B1C,GACzB,OAAIA,aAAiB,UACVA,EAAMnB,OAEV,MAGX,oBAAyBmB,GACrB,OAAOA,aAAiB,UAClB,IAAI,EAAAV,KAAK,IAAK,IAAK,IAAK,KACrBe,YAAY,IAAI,EAAAf,KAAK,EAAG,EAAG,IAAK,KAAMU,EAAMb,IAAM,KACrD,MAGV,0BAA+B8G,GAC3B,OAAO,SAAAjG,GACH,OAAOA,aAAiB,UAClBiG,EAAQjG,EAAMZ,WAAWC,MACrBW,EAAMZ,WAAWV,MACjB,IAAI,EAAAY,KAAK,GAAI,GAAI,GAAI,KACzB,OAId,wBAA6Bf,GAEzB,IADA,IAAM2H,EAAM,IAAI,EAAAd,WAAyB,EAAd7G,EAAM2E,MAA0B,EAAf3E,EAAM4E,QACzC3E,EAAI,EAAGA,EAAID,EAAM2E,MAAO1E,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAM4E,OAAQ1E,IAAK,CACnC,IAAMuB,EAAQzB,EAAM0B,IAAIzB,EAAGC,GAC3B,GAAIuB,aAAiB,UAAK,CACtB,IAAMmG,EAAuB,CACf,EAAVnG,EAAMxB,EAAQ,EAAI,EAAAmB,oBAAoBK,EAAMJ,QAAQ,GAC1C,EAAVI,EAAMvB,EAAQ,EAAI,EAAAkB,oBAAoBK,EAAMJ,QAAQ,IAExDsG,EAAIlB,SAAQ,MAAZkB,EAAG,EAAaC,EAAI,KAAI,EAAA7G,KAAK,EAAG,EAAG,EAAG,SAKlD,OADA4G,EAAIhB,SACGgB,EAAI1B,O,ueCtFf,aACA,SACA,SAEa,EAAA7E,oBAA0C,CACnD,EAAE,GAAI,GACN,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,IAGT,MACI,SACapB,EACFC,EACAC,EACAC,GAHE,KAAAH,QACF,KAAAC,IACA,KAAAC,IACA,KAAAC,QAEPH,EAAM8E,IAAI7E,EAAGC,EAAGc,OAPX,EAAAuG,QAWb,kBAEI,WAAYvH,EAAcC,EAAWC,EAAWC,GAAhD,MACI,YAAMH,EAAOC,EAAGC,EAAGC,IAAM,K,OACzBH,EAAM6H,OAAO,GACb,EAAK1F,OAAQ,E,EAQrB,OAbkC,OAO9B,YAAAD,OAAA,aAGA,YAAAG,MAAA,aAGJ,EAbA,CAAkCkF,GAArB,EAAAjF,eAeb,kBAII,WACaqC,EACAC,EACTkD,EACA7B,GAJJ,MAMI,YAAMtB,EAAOC,IAAO,K,OALX,EAAAD,QACA,EAAAC,SAKT,EAAK+C,IAAM,IAAI,EAAArB,OAAO3B,EAAQmD,EAAWlD,EAASkD,EAAW7B,GAC7D,EAAK0B,IAAIvB,IAAI2B,uBAAwB,EACrC,EAAKC,QAAU,CAAEX,EAAG,GAAIC,EAAG,IAC3B,EAAK1G,IAAM,E,EA+DnB,OA7E2B,OAgBvB,YAAAkE,IAAA,SAAI7E,EAAWC,EAAWuB,GACtB,YAAMqD,IAAG,UAAC7E,EAAGC,EAAGuB,GACZA,IACAA,EAAMxB,EAAIA,EACVwB,EAAMvB,EAAIA,IAGlB,YAAA+H,UAAA,SAAUC,GACNlH,KAAK2G,IAAIvB,IAAI+B,UACTD,EACA,EACA,EACAlH,KAAK2G,IAAI1B,KAAKtB,MACd3D,KAAK2G,IAAI1B,KAAKrB,SAGtB,YAAAwD,WAAA,WACIpH,KAAK2G,IAAIvB,IAAIiC,UACT,EACA,EACArH,KAAK2G,IAAI1B,KAAKtB,MACd3D,KAAK2G,IAAI1B,KAAKrB,SAGtB,YAAA0D,UAAA,SAAUC,GAEN,IADA,IAAIZ,EAAM,IAAI,EAAAd,WAAW7F,KAAK2D,MAAO3D,KAAK4D,QACjC3E,EAAI,EAAGA,EAAIe,KAAK2D,MAAO1E,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIc,KAAK4D,OAAQ1E,IAAK,CAClC,IAAMsI,EAAMD,EAAKvH,KAAKU,IAAIzB,EAAGC,GAAID,EAAGC,GAChCsI,GACAb,EAAIlB,SAASxG,EAAGC,EAAGsI,GAI/BxH,KAAKiH,UAAUN,EAAIhB,SAASV,OAEhC,YAAA4B,OAAA,SAAOpG,GACH,IAAI+B,EACJ,GACIA,EAAI,EAAA7C,QAAQ,EAAGK,KAAK2D,MAAQ3D,KAAK4D,OAAS,WACrC5D,KAAKgH,QAAQX,EAAE7D,IACxBxC,KAAKgH,QAAQX,EAAE7D,GAAK/B,GAExB,YAAAgH,KAAA,WACIzH,KAAKgH,QAAQV,EAAItG,KAAKgH,QAAQX,GAElC,YAAAqB,KAAA,WAEI,IAAK,IAAMC,KADX3H,KAAKgH,QAAQX,EAAI,GACCrG,KAAKgH,QAAQV,EAAG,CAC9B,IAAM7F,EAAsBT,KAAKgH,QAAQV,EAAEqB,GACtClH,EAAMU,OAIPV,EAAMS,SACNlB,KAAK6G,OAAOpG,KAJZT,KAAK8D,IAAIrD,EAAMxB,EAAGwB,EAAMvB,OAAG0I,GAC3BnH,EAAMY,SAMdrB,KAAKgH,QAAQV,EAAItG,KAAKgH,QAAQX,EAC9BrG,KAAKJ,OAEb,EA7EA,CAA2B,WAAd,EAAAiI,S,4RCzCb,aACA,SACA,SACA,SASA,SAEAC,OAAOC,iBAAiB,QAAQ,W,UAwIxBC,EACAC,EACAC,EACAC,EAnIJ,SAASzF,IAEL,UAAIjD,OAAS,EAEbT,EAAQ,IAAI,EAAA6I,MACRO,SAASC,EAAYtE,OACrBqE,SAASE,EAAavE,OACtBqE,SAASG,EAAYxE,OACrByE,GAKJ,IAFA,IAAMC,EAAcL,SAASM,EAAW3E,OAE/BvB,EAAI,EAAGA,EAAIR,KAAKoB,IAAIpE,EAAM2E,MAAQ3E,EAAM4E,OAAQ6E,GAAcjG,IACnE,IAAI,UAAG,WAAH,UAAG,UACHxD,GACGA,EAAMsF,YAAW,CACpB,IAAI,EAAAvE,KAAK,IAAK,IAAK,IAAK,KACxB,IACA,IAAI,EAAA8C,OAAO,IAAIJ,aACf,EAAA1C,KAAK4E,UACL,CAAExB,MAAO,GAAKE,OAAQ,QAI9BrE,EAAMyI,OACNkB,IAGJ,SAASjB,IACDkB,KAAKC,MAAQC,EAAW,MACxBC,EAAKC,UAAYC,EAAIC,QAAQ,GAC7BD,EAAM,EACNH,EAAWF,KAAKC,OAEpBI,IACAjK,EAAM0I,OACFyB,EAAYC,SAAST,IACzBU,EAAQC,UAAY,UAAI7J,OAAO8J,WAC/BC,EAAaF,UAAY,IAAItK,EAAMY,IAAM,KAAMsJ,QAAQ,GAG3D,SAASP,IAEL,OADA3J,EAAMoI,aACEqC,EAAU1F,OACd,IAAK,SACD/E,EAAMsI,UAAU,EAAAoC,YAChB,MACJ,IAAK,SACD1K,EAAMsI,UAAU,EAAAqC,WAAWvB,SAASwB,EAAiB7F,SACrD,MACJ,IAAK,OACD/E,EAAMsI,UAAU,EAAAuC,UAChB,MACJ,IAAK,WACD7K,EAAMsI,UAAU,EAAAwC,cAChB,MACJ,IAAK,YACD9K,EAAMsI,UAAU,EAAAyC,eAChB,MACJ,IAAK,SACD/K,EAAMsI,UAAU,EAAA0C,eAAeC,IAInCC,EAAad,SACbpK,EAAMiI,UAAU,EAAAkD,aAAanL,IAiBrC,SAASoL,IACDC,EAAWjB,SAbfkB,cAAcC,GACdpB,EAAYC,SAAU,EACtBD,EAAYqB,UAAW,EACvBzB,EAAKC,UAAY,YAYZqB,EAAWI,mBAAmCzB,UAAY,eAR/DuB,EAAaG,YAAYhD,GACzByB,EAAYC,SAAU,EACtBD,EAAYqB,UAAW,EASlBH,EAAWI,mBAAmCzB,UAAY,SAInE,SAAS2B,EAAUC,GACXA,aAAaC,YACb3C,EAAW0C,EAAEE,QAAQ,GAAGC,QAAUC,EAClC7C,EAAWyC,EAAEE,QAAQ,GAAGG,QAAUC,IAElChD,EAAW0C,EAAEG,QAAUC,EACvB7C,EAAWyC,EAAEK,QAAUC,GAEvBN,EAAEO,SAAW3C,IACb4C,GAAS,GAIjB,SAASC,IACLnD,EAAWF,EACXG,EAAWF,EACXmD,GAAS,EAGb,SAASE,EAAKV,GACNQ,IACAR,EAAEW,iBACEX,aAAaC,YACb7C,EAAW4C,EAAEE,QAAQ,GAAGC,QAAU7C,EAClCD,EAAW2C,EAAEE,QAAQ,GAAGG,QAAU9C,IAElCH,EAAW4C,EAAEG,QAAU7C,EACvBD,EAAW2C,EAAEK,QAAU9C,GAE3B6C,EAAUhD,EACVkD,EAAUjD,EACVO,EAAKgD,MAAMC,UAAY,eAAezD,EAAQ,OAAOC,EAAQ,UAQrE,IAAI+C,EAAU,EACVE,EAAU,EACVE,GAAS,EAEPM,EAAgBxG,SAASyG,cAAc,kBAE7CD,EAAc3D,iBAAiB,aAAc4C,GAAW,GACxDe,EAAc3D,iBAAiB,WAAYsD,GAAS,GACpDK,EAAc3D,iBAAiB,YAAauD,GAAM,GAElDI,EAAc3D,iBAAiB,YAAa4C,GAAW,GACvDe,EAAc3D,iBAAiB,UAAWsD,GAAS,GACnDK,EAAc3D,iBAAiB,YAAauD,GAAM,GAElD,IAAM9C,EAAOtD,SAASyG,cAAc,QAED,QAAnC,EAAAzG,SAASyG,cAAc,oBAAY,SAAE5D,iBAAiB,UAAU,SAAA6D,G,QACvDA,EAAMT,OAA4B/B,SACnCsC,EAAcG,UAAUC,IAAI,4BACG,QAA/B,EAAA5G,SAASyG,cAAc,gBAAQ,SAAEE,UAAUC,IAAI,gCAE/CJ,EAAcG,UAAU7H,OAAO,4BACA,QAA/B,EAAAkB,SAASyG,cAAc,gBAAQ,SAAEE,UAAU7H,OAAO,kCAI1D,IAAMqF,EAAUnE,SAASyG,cAAc,WACjCnC,EAAetE,SAASyG,cAAc,iBACtC5C,EAAO7D,SAASyG,cAAc,QAE9BlC,EAAYvE,SAASyG,cAAc,cACzClC,EAAU1B,iBAAiB,UAAU,WACjC,IAAMgE,EAAwB7G,SACzByG,cAAc,uBACnBK,MACK/F,KAAK8F,EAAsBE,UAC3BC,SAAQ,SAAAC,GACDA,EAAQC,KAAO,QAAQ3C,EAAU1F,MAAK,WACtCoI,EAAQN,UAAU7H,OAAO,UAEzBmI,EAAQN,UAAUC,IAAI,aAGlCnD,OAWJ,IAAMsB,EAAqB,CACvB,uBAAuB,EACvB,eAAe,EACf,iBAAiB,EACjB,qBAAqB,EACrB,aAAa,EACb,mBAAmB,GAGjBoC,EAAmC,GACzC,IAAK,IAAMC,KAAcrC,EACrBoC,EAAuBE,KAAK,IAAID,GAGpCpH,SAASsH,iBAAiBH,EAAuBI,KAAK,MACjDP,SAAQ,SAAAQ,GACL,IAAMC,EAAOD,EACbC,EAAK5E,iBAAiB,UAAU,WAC5BkC,EAAmB0C,EAAKP,IAAyBO,EAAKvD,QACtDT,UAIZ,IAAMiB,EAAmB1E,SAASyG,cAAc,wBAChD/B,EAAiB7B,iBAAiB,QAASY,GAE3C,IAAMQ,EAAcjE,SAASyG,cAAc,iBAErCzB,EAAehF,SAASyG,cAAc,iBAC5CzB,EAAanC,iBAAiB,SAAUY,GAExC,IAAM0B,EAAanF,SAASyG,cAAc,eAC1CtB,EAAWtC,iBAAiB,QAASqC,GAEF,QAAnC,EAAAlF,SAASyG,cAAc,oBAAY,SAAE5D,iBAAiB,SAAS,WAC3DsC,EAAWjB,SAAU,EACrBgB,IACApL,EAAM0I,OACNiB,OAGJ,IAAMN,EAAcnD,SAASyG,cAAc,gBACrCrD,EAAepD,SAASyG,cAAc,iBACtCpD,EAAcrD,SAASyG,cAAc,gBAG3CzG,SAASsH,iBACL,6CACFN,SAAQ,SAAAU,GACNA,EAAK7E,iBAAiB,UAAU,SAAA6D,GAC5B,IAAMT,EAASS,EAAMT,OACrBA,EAAOpH,OAAS,EAAA1B,UACZ+F,SAAS+C,EAAO/H,KAChBgF,SAAS+C,EAAO7H,KAChB8E,SAAS+C,EAAOpH,SACfqE,SAAS+C,EAAO/H,MAAMmG,iBAInC,IAMIvK,EANE0J,EAAaxD,SAASyG,cAAc,eAEN,QAApC,EAAAzG,SAASyG,cAAc,qBAAa,SAAE5D,iBAAiB,QAASrF,GA5P3DwC,SAASyG,cAAc,YACnBH,MACAqB,UAAe/E,OAAOgF,YAAW,KAgQ1CpK,IAEA,IAAIoG,EAAWF,KAAKC,MAChBI,EAAM,EACNsB,EAAaG,YAAYhD,QCtR7BqF,EAA2B,IAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUI,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAGpEG,EAAOD,QCjBWF,CAAoB,M","file":"bundle.js","sourcesContent":["import { Rgba } from \"./drawing\";\r\nimport { fixNumber, limNumber, randChoice, randFloat, randInt } from \"./math-functions\";\r\nimport { DynamicBlock, MOORE_NEIGHBOURHOOD, World } from \"./world\";\r\n\r\nexport default class Bot extends DynamicBlock {\r\n    static amount = 0;\r\n    private _narrow: number;\r\n    age: number;\r\n    lastAction: { name: string, color: Rgba };\r\n    constructor(\r\n        world: World,\r\n        x: number,\r\n        y: number,\r\n        color: Rgba,\r\n        public energy: number,\r\n        public genome: Genome,\r\n        public family: Rgba,\r\n        public abilities: {\r\n            photo: number,\r\n            attack: number\r\n        }\r\n    ) {\r\n        super(world, x, y, color);\r\n        Bot.amount++;\r\n        this._narrow = randInt(0, 8);\r\n        this.age = 0;\r\n        this.lastAction = { name: 'none', color: new Rgba(20, 20, 20, 255) };\r\n    }\r\n    set narrow(n: number) {\r\n        this._narrow = fixNumber(0, 8, n);\r\n    }\r\n    get narrow(): number {\r\n        return this._narrow;\r\n    }\r\n    narrowToCoords(): [number, number] {\r\n        const x = this.x + MOORE_NEIGHBOURHOOD[this.narrow][0];\r\n        const y = this.y + MOORE_NEIGHBOURHOOD[this.narrow][1];\r\n        return this.world.fixCoords(x, y);\r\n    }\r\n    getForvard() {\r\n        const coords = this.narrowToCoords();\r\n        return { block: this.world.get(...coords), coords: coords };\r\n    }\r\n    moveTo(x: number, y: number) {\r\n        this.world.swap(this.x, this.y, x, y);\r\n    }\r\n    multiplyTo(x: number, y: number) {\r\n        new Bot(\r\n            this.world,\r\n            x,\r\n            y,\r\n            this.color.interpolate(new Rgba(255, 255, 255, 255), 0.25),\r\n            this.energy / 3,\r\n            this.genome.replication(),\r\n            this.family.mutateRgb(10),\r\n            { ...this.abilities }\r\n        );\r\n        this.energy /= 3;\r\n    }\r\n    randMove() {\r\n        const coords = this.world.fixCoords(\r\n            this.x + randInt(-1, 2),\r\n            this.y + randInt(-1, 2)\r\n        );\r\n        this.moveTo(...coords);\r\n    }\r\n    onStep() {\r\n        if (this.energy < 1 || this.energy > 100 || this.age > 2000) {\r\n            this.alive = false;\r\n            return;\r\n        }\r\n        this.genome.doAction(this);\r\n        this.energy -= 0.1;\r\n        this.age += 1;\r\n    }\r\n    onDie() {\r\n        Bot.amount--;\r\n        // new DeadBot(this);\r\n    }\r\n}\r\n\r\nclass DeadBot extends DynamicBlock {\r\n    age: number;\r\n    constructor(bot: Bot) {\r\n        super(bot.world, bot.x, bot.y, bot.color.interpolate(new Rgba(0, 0, 0, 255), 0.5));\r\n        this.age = 0;\r\n    }\r\n    onStep() {\r\n        if (this.age > 500) {\r\n            this.alive = false;\r\n        }\r\n        this.color = this.color.interpolate(new Rgba(10, 10, 50, 255), 0.005);\r\n        this.age++;\r\n    }\r\n}\r\n\r\nexport class Genome {\r\n    genes: Gene[];\r\n    private _pointer: number;\r\n    constructor(readonly length: number) {\r\n        this.genes = [];\r\n        this._pointer = 0;\r\n    }\r\n    set pointer(n: number) {\r\n        this._pointer = fixNumber(0, this.length, n);\r\n    }\r\n    get pointer() {\r\n        return this._pointer;\r\n    }\r\n    randGene(): Gene {\r\n        return {\r\n            action: randChoice(GENE_TEMPLATES),\r\n            property: Math.random(),\r\n            branches: [\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length)\r\n            ]\r\n        };\r\n    }\r\n    mutateGene(gene: Gene): Gene {\r\n        return {\r\n            action: Math.random() > 0.9 ? randChoice(GENE_TEMPLATES) : gene.action,\r\n            property: limNumber(0, 1, gene.property + randFloat(-0.01, 0.01)),\r\n            branches: gene.branches.map(\r\n                i => Math.random() > 0.9\r\n                    ? randInt(0, this.length)\r\n                    : i\r\n            ) as [number, number, number, number]\r\n        }\r\n    }\r\n    fillRandom(start: number = 0): this {\r\n        for (let i = start; i < this.length; i++) {\r\n            this.genes[i] = this.randGene();\r\n        }\r\n        return this;\r\n    }\r\n    create(genes: Gene[]): this {\r\n        for (let i = 0; i < genes.length; i++) {\r\n            this.genes[i] = genes[i];\r\n        }\r\n        this.fillRandom(genes.length);\r\n        return this;\r\n    }\r\n    fillPlant(): this {\r\n        for (let i = 0; i < this.length; i++) {\r\n            this.genes[i] = {\r\n                action: GENE_TEMPLATES[randInt(0, 3)],\r\n                property: Math.random(),\r\n                branches: [\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length)\r\n                ]\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    // replication2() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.mutateGene(this.genes[i]);\r\n    //     }\r\n    //     return genome;\r\n    // }\r\n    // replication() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.genes[i];\r\n    //     }\r\n    //     const pointer = randInt(0, genome.length);\r\n    //     genome.genes[pointer] = this.mutateGene(this.genes[pointer]);\r\n    //     return genome;\r\n    // }\r\n    replication() {\r\n        const genome = new Genome(this.length);\r\n        for (let i = 0; i < this.length; i++) {\r\n            genome.genes[i] = Math.random() > 0.995\r\n                ? this.mutateGene(this.genes[i])\r\n                : this.genes[i];\r\n        }\r\n        return genome;\r\n    }\r\n    doAction(bot: Bot) {\r\n        // bot.lastAction = { name: 'none', color: new Rgba(20, 20, 20, 255) };\r\n        for (let i = 0; i < 20; i++) {\r\n            const GENE: Gene = this.genes[this.pointer];\r\n            const RESULT = GENE.action(bot, GENE.property, GENE.branches);\r\n            if (RESULT.goto) {\r\n                this.pointer = RESULT.goto;\r\n            } else {\r\n                this.pointer++;\r\n            }\r\n            if (RESULT.completed) return;\r\n        }\r\n        bot.lastAction = { name: 'view-do-nothing', color: new Rgba(50, 50, 50, 255) };\r\n        bot.color = bot.color.interpolate(new Rgba(100, 100, 100, 255), 0.1);\r\n    }\r\n}\r\n\r\ntype ActionResult = { completed: boolean, goto?: number }\r\n\r\ntype ActionFn = (\r\n    bot: Bot,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n) => ActionResult;\r\n\r\ntype Gene = {\r\n    action: ActionFn,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n}\r\n\r\nconst GENE_TEMPLATES: ActionFn[] = [\r\n    // Restart\r\n    (bot, property, branches) => {\r\n        return { completed: false, goto: 0 }\r\n    },\r\n\r\n    // Photosynthesis\r\n    (bot, property, branches) => {\r\n        bot.energy += 0.5 * bot.abilities.photo ** 2;\r\n        bot.abilities.photo = Math.min(1, bot.abilities.photo + 0.01);\r\n        bot.abilities.attack = Math.max(0, bot.abilities.attack - 0.01);\r\n        bot.color = bot.color.interpolate(new Rgba(0, 255, 0, 255), 0.01);\r\n        bot.lastAction = { name: 'view-photosynthesis', color: new Rgba(0, 200, 0, 255) }\r\n        return { completed: true }\r\n    },\r\n\r\n    // Rotate\r\n    (bot, property, branches) => {\r\n        if (property > 0.5) {\r\n            bot.narrow++;\r\n        } else {\r\n            bot.narrow--;\r\n        }\r\n        return { completed: false }\r\n    },\r\n\r\n    // Multiply\r\n    (bot, property, branches) => {\r\n        const forward = bot.getForvard();\r\n        if (!forward.block && bot.age > 2) {\r\n            bot.multiplyTo(...forward.coords);\r\n            bot.lastAction = { name: 'view-multiply', color: new Rgba(0, 0, 200, 255) };\r\n        }\r\n        // bot.lastAction = new Rgba(0, 0, 255, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Share energy\r\n    (bot, property, branches) => {\r\n        bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.005);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot && forward.block.energy < bot.energy) {\r\n            const E = (forward.block.energy + bot.energy) / 2;\r\n            bot.energy = E;\r\n            forward.block.energy = E;\r\n            bot.lastAction = { name: 'view-share-energy', color: new Rgba(0, 150, 150, 255) };\r\n        }\r\n        // bot.lastAction = new Rgba(0, 100, 255, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Look forward\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            if (forward.block.family.difference(bot.color) < property) {\r\n                return { completed: false, goto: branches[0] }\r\n            } else {\r\n                return { completed: false, goto: branches[1] }\r\n            }\r\n        } else if (forward.block instanceof DeadBot) {\r\n            return { completed: false, goto: branches[2] }\r\n        } else {\r\n            return { completed: false, goto: branches[3] }\r\n        }\r\n    },\r\n\r\n    (bot, property, branches) => {\r\n        if (bot.energy / 100 < property) {\r\n            return { completed: false, goto: branches[0] }\r\n        } else {\r\n            return { completed: false, goto: branches[1] }\r\n        }\r\n    },\r\n\r\n    // DestroyDead\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof DeadBot && forward.block.age > 2) {\r\n            forward.block.alive = false;\r\n            // bot.lastAction = new Rgba(255, 255, 0, 255);\r\n        }\r\n        // bot.lastAction = new Rgba(255, 255, 0, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // Move\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (!forward.block) bot.moveTo(...forward.coords);\r\n        bot.lastAction = { name: 'view-move', color: new Rgba(150, 150, 150, 255) };\r\n        return { completed: true }\r\n    },\r\n\r\n    // // Move 2\r\n    // (bot, property, branches) => {\r\n    //     // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     bot.moveTo(...forward.coords);\r\n    //     bot.energy -= 0.1;\r\n    //     return { completed: true }\r\n    // },\r\n\r\n    // Kill\r\n    (bot, property, branches) => {\r\n        bot.energy -= 0.1;\r\n        bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        bot.abilities.attack = Math.min(1, bot.abilities.attack + 0.01);\r\n        bot.abilities.photo = Math.max(0, bot.abilities.photo - 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            const E = (forward.block.energy / 2) * bot.abilities.attack ** 2;\r\n            forward.block.energy -= forward.block.energy / 2;\r\n            bot.energy += E;\r\n            bot.lastAction = { name: 'view-attack', color: new Rgba(200, 0, 0, 255) };\r\n        }\r\n        // bot.lastAction = new Rgba(255, 0, 0, 255);\r\n        return { completed: true }\r\n    },\r\n\r\n    // // Virus\r\n    // (bot, property, branches) => {\r\n    //     bot.color = bot.color.interpolate(new Rgba(255, 0, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     if (forward.block instanceof Bot) {\r\n    //         forward.block.genome = bot.genome.replication();\r\n    //         bot.lastAction = new Rgba(255, 0, 255, 255);\r\n    //     }\r\n    //     return { completed: true }\r\n    // }\r\n];","import { fixNumber, randInt } from \"./math-functions\";\r\n\r\nexport default class Grid<T> {\r\n    private readonly cells: (T | undefined)[][];\r\n    constructor(readonly width: number, readonly height: number) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            this.cells[x] = [];\r\n        }\r\n    }\r\n    get(x: number, y: number): T | undefined {\r\n        return this.cells[x][y];\r\n    }\r\n    set(x: number, y: number, value: T | undefined) {\r\n        this.cells[x][y] = value;\r\n    }\r\n    remove(x: number, y: number) {\r\n        delete this.cells[x][y];\r\n    }\r\n    swap(x: number, y: number, x2: number, y2: number) {\r\n        const bufferA = this.get(x, y);\r\n        const bufferB = this.get(x2, y2);\r\n        this.set(x, y, bufferB);\r\n        this.set(x2, y2, bufferA);\r\n    }\r\n    fixCoords(x: number, y: number): [number, number] {\r\n        return [\r\n            fixNumber(0, this.width, x),\r\n            fixNumber(0, this.height, y),\r\n        ];\r\n    }\r\n    randCoords(): [number, number] {\r\n        return [\r\n            randInt(0, this.width),\r\n            randInt(0, this.height)\r\n        ];\r\n    }\r\n    randEmpty(): [number, number] {\r\n        let coords: [number, number];\r\n        do {\r\n            coords = this.randCoords();\r\n        } while (this.get(...coords));\r\n        return coords;\r\n    }\r\n}\r\n","import { interpolate, limNumber, randFloat, randInt } from \"./math-functions\";\r\n\r\nexport class Rgba {\r\n    private static readonly MAX_DIF = 255 * 4;\r\n    static randRgb(): Rgba {\r\n        return new Rgba(randInt(0, 256), randInt(0, 256), randInt(0, 256), 255);\r\n    }\r\n    constructor(\r\n        readonly red: number,\r\n        readonly green: number,\r\n        readonly blue: number,\r\n        readonly alpha: number\r\n    ) { }\r\n    interpolate(other: Rgba, t: number): Rgba {\r\n        return new Rgba(\r\n            interpolate(this.red, other.red, t),\r\n            interpolate(this.green, other.green, t),\r\n            interpolate(this.blue, other.blue, t),\r\n            interpolate(this.alpha, other.alpha, t)\r\n        );\r\n    }\r\n    normalise(): Rgba {\r\n        return new Rgba(\r\n            limNumber(0, 255, this.red),\r\n            limNumber(0, 255, this.green),\r\n            limNumber(0, 255, this.blue),\r\n            limNumber(0, 255, this.alpha)\r\n        );\r\n    }\r\n    mutateRgb(value: number): Rgba {\r\n        return new Rgba(\r\n            this.red + randFloat(-value, value),\r\n            this.green + randFloat(-value, value),\r\n            this.blue + randFloat(-value, value),\r\n            this.alpha\r\n        ).normalise();\r\n    }\r\n    difference(other: Rgba): number {\r\n        return ((\r\n            Math.abs(this.red - other.red) +\r\n            Math.abs(this.green - other.green) +\r\n            Math.abs(this.blue - other.blue) +\r\n            Math.abs(this.alpha - other.alpha)\r\n        ) / Rgba.MAX_DIF);\r\n    }\r\n}\r\n\r\nexport class Canvas {\r\n    readonly node: HTMLCanvasElement;\r\n    readonly ctx: CanvasRenderingContext2D;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        this.node = node || document.createElement(\"canvas\");\r\n        this.node.width = width;\r\n        this.node.height = height;\r\n        this.ctx = this.node.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    }\r\n}\r\n\r\nexport class PixelsData extends Canvas {\r\n    readonly data: ImageData;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        super(width, height, node);\r\n        this.data = this.ctx.getImageData(\r\n            0,\r\n            0,\r\n            this.node.width,\r\n            this.node.height\r\n        );\r\n    }\r\n    setPixel(x: number, y: number, color: Rgba) {\r\n        const POINTER = (y * this.data.width + x) * 4;\r\n        this.data.data[POINTER] = color.red;\r\n        this.data.data[POINTER + 1] = color.green;\r\n        this.data.data[POINTER + 2] = color.blue;\r\n        this.data.data[POINTER + 3] = color.alpha;\r\n    }\r\n    update() {\r\n        this.ctx.putImageData(this.data, 0, 0);\r\n        return this;\r\n    }\r\n}\r\n","export function* range(from: number, to: number) {\r\n    while (from < to) {\r\n        yield from++;\r\n    }\r\n}\r\n\r\nexport function randFloat(bottom: number, top: number) {\r\n    return Math.random() * (top - bottom) + bottom;\r\n}\r\n\r\nexport function randInt(bottom: number, top: number) {\r\n    return Math.floor(randFloat(bottom, top));\r\n}\r\n\r\nexport function randChoice<T>(arr: T[]): T {\r\n    return arr[randInt(0, arr.length)];\r\n}\r\n\r\nexport function fixNumber(min: number, max: number, number: number): number {\r\n    return number >= min ? number % max : max - (-number % max);\r\n}\r\n\r\nexport function normalizeNumber(\r\n    min: number,\r\n    max: number,\r\n    number: number\r\n): number {\r\n    return (number - min) / (max - min);\r\n}\r\n\r\nexport function limNumber(min: number, max: number, number: number): number {\r\n    return Math.max(Math.min(number, max), min);\r\n}\r\n\r\nexport function interpolate(a: number, b: number, t: number): number {\r\n    return a + (b - a) * t;\r\n}\r\n","import Bot from \"./Bot\";\r\nimport { PixelsData, Rgba } from \"./drawing\";\r\nimport { normalizeNumber } from \"./math-functions\";\r\nimport { Block, MOORE_NEIGHBOURHOOD, World } from \"./world\";\r\n\r\nexport function drawColors(block: any) {\r\n    if (block instanceof Block) {\r\n        return block.color;\r\n    }\r\n    return null;\r\n}\r\n\r\n// export function drawEnergy(block: any) {\r\n//     if (block instanceof Bot) {\r\n//         return new Rgba(20, 20, 100, 255)\r\n//             .interpolate(\r\n//                 new Rgba(255, 255, 0, 255),\r\n//                 block.energy / 100\r\n//             );\r\n//     }\r\n//     return null;\r\n// }\r\n\r\nexport function drawEnergy(divider: number): (block: any) => Rgba | null {\r\n    return block => {\r\n        return block instanceof Bot\r\n            ? new Rgba(0, 0, 50, 255)\r\n                .interpolate(\r\n                    new Rgba(255, 255, 0, 255),\r\n                    block.energy / divider\r\n                )\r\n            : null;\r\n    }\r\n}\r\n\r\nexport function drawAbilities(block: any) {\r\n    if (block instanceof Bot) {\r\n        return new Rgba(\r\n            normalizeNumber(0.5, 1, block.abilities.attack) * 255,\r\n            normalizeNumber(0.5, 1, block.abilities.photo) * 255,\r\n            50,\r\n            255\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function drawFamilies(block: any) {\r\n    if (block instanceof Bot) {\r\n        return block.family;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function drawAges(block: any) {\r\n    return block instanceof Bot\r\n        ? new Rgba(150, 150, 150, 255)\r\n            .interpolate(new Rgba(0, 0, 100, 255), block.age / 2000)\r\n        : null;\r\n}\r\n\r\nexport function drawLastAction(options: any): (block: any) => Rgba | null {\r\n    return block => {\r\n        return block instanceof Bot\r\n            ? options[block.lastAction.name]\r\n                ? block.lastAction.color\r\n                : new Rgba(20, 20, 20, 255)\r\n            : null\r\n    }\r\n}\r\n\r\nexport function getNarrowImg(world: World): HTMLCanvasElement {\r\n    const img = new PixelsData(world.width * 3, world.height * 3);\r\n    for (let x = 0; x < world.width; x++) {\r\n        for (let y = 0; y < world.height; y++) {\r\n            const block = world.get(x, y);\r\n            if (block instanceof Bot) {\r\n                const xy: [number, number] = [\r\n                    block.x * 3 + 1 + MOORE_NEIGHBOURHOOD[block.narrow][0],\r\n                    block.y * 3 + 1 + MOORE_NEIGHBOURHOOD[block.narrow][1],\r\n                ];\r\n                img.setPixel(...xy, new Rgba(0, 0, 0, 127));\r\n            }\r\n        }\r\n    }\r\n    img.update();\r\n    return img.node;\r\n}","import { Canvas, PixelsData, Rgba } from \"./drawing\";\r\nimport Grid from \"./Grid\";\r\nimport { fixNumber, randInt, range } from \"./math-functions\";\r\n\r\nexport const MOORE_NEIGHBOURHOOD: [number, number][] = [\r\n    [-1, -1],\r\n    [0, -1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, 1],\r\n    [-1, 1],\r\n    [-1, 0],\r\n];\r\n\r\nexport class Block {\r\n    constructor(\r\n        readonly world: World,\r\n        public x: number,\r\n        public y: number,\r\n        public color: Rgba\r\n    ) {\r\n        world.set(x, y, this);\r\n    }\r\n}\r\n\r\nexport class DynamicBlock extends Block {\r\n    alive: boolean;\r\n    constructor(world: World, x: number, y: number, color: Rgba) {\r\n        super(world, x, y, color);\r\n        world.assign(this);\r\n        this.alive = true;\r\n    }\r\n    onStep() {\r\n\r\n    }\r\n    onDie() {\r\n\r\n    }\r\n}\r\n\r\nexport class World extends Grid<Block | undefined> {\r\n    private readonly img: Canvas;\r\n    private dynamic: { a: any; b: any; };\r\n    age: number;\r\n    constructor(\r\n        readonly width: number,\r\n        readonly height: number,\r\n        pixelSize: number,\r\n        node: HTMLCanvasElement\r\n    ) {\r\n        super(width, height);\r\n        this.img = new Canvas(width * pixelSize, height * pixelSize, node);\r\n        this.img.ctx.imageSmoothingEnabled = false;\r\n        this.dynamic = { a: {}, b: {} };\r\n        this.age = 0;\r\n    }\r\n    set(x: number, y: number, block: Block | undefined) {\r\n        super.set(x, y, block);\r\n        if (block) {\r\n            block.x = x;\r\n            block.y = y;\r\n        }\r\n    }\r\n    drawLayer(layer: CanvasImageSource) {\r\n        this.img.ctx.drawImage(\r\n            layer,\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    clearImage() {\r\n        this.img.ctx.clearRect(\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    visualize(func: (block: any | undefined, x: number, y: number) => Rgba | null) {\r\n        let img = new PixelsData(this.width, this.height);\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                const col = func(this.get(x, y), x, y);\r\n                if (col) {\r\n                    img.setPixel(x, y, col);\r\n                }\r\n            }\r\n        }\r\n        this.drawLayer(img.update().node);\r\n    }\r\n    assign(block: DynamicBlock) {\r\n        let i: number;\r\n        do {\r\n            i = randInt(0, this.width * this.height * 1000);\r\n        } while (this.dynamic.a[i]);\r\n        this.dynamic.a[i] = block;\r\n    }\r\n    init() {\r\n        this.dynamic.b = this.dynamic.a;\r\n    }\r\n    step() {\r\n        this.dynamic.a = {};\r\n        for (const key in this.dynamic.b) {\r\n            const block: DynamicBlock = this.dynamic.b[key];\r\n            if (!block.alive) {\r\n                this.set(block.x, block.y, undefined);\r\n                block.onDie();\r\n            } else {\r\n                block.onStep();\r\n                this.assign(block);\r\n            }\r\n        }\r\n        this.dynamic.b = this.dynamic.a;\r\n        this.age++;\r\n    }\r\n}\r\n","import Bot, { Genome } from \"./lib/Bot\";\r\nimport { Rgba } from \"./lib/drawing\";\r\nimport { limNumber } from \"./lib/math-functions\";\r\nimport {\r\n    drawAbilities,\r\n    drawAges,\r\n    drawColors,\r\n    drawEnergy,\r\n    drawFamilies,\r\n    drawLastAction,\r\n    getNarrowImg\r\n} from \"./lib/view-modes\";\r\nimport { World } from \"./lib/world\";\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    function onResizeWindow() {\r\n        (document.querySelector('.wrapper') as HTMLElement)\r\n            .style\r\n            .maxHeight = `${window.innerHeight}px`;\r\n    }\r\n\r\n    function start() {\r\n\r\n        Bot.amount = 0;\r\n\r\n        world = new World(\r\n            parseInt($inputWidth.value),\r\n            parseInt($inputHeight.value),\r\n            parseInt($inputPixel.value),\r\n            $img\r\n        );\r\n\r\n        const BOTS_AMOUNT = parseInt($inputBots.value);\r\n\r\n        for (let i = 0; i < Math.min(world.width * world.height, BOTS_AMOUNT); i++) {\r\n            new Bot(\r\n                world,\r\n                ...world.randEmpty(),\r\n                new Rgba(100, 100, 100, 255),\r\n                100,\r\n                new Genome(64).fillRandom(),\r\n                Rgba.randRgb(),\r\n                { photo: 0.5, attack: 0.5 }\r\n            );\r\n        }\r\n\r\n        world.init();\r\n        updateImage();\r\n    }\r\n\r\n    function step() {\r\n        if (Date.now() - lastLoop > 1000) {\r\n            $fps.innerText = fps.toFixed(0);\r\n            fps = 0;\r\n            lastLoop = Date.now();\r\n        }\r\n        fps++;\r\n        world.step();\r\n        if ($chbxUpdImg.checked) updateImage();\r\n        $amount.innerHTML = Bot.amount.toString();\r\n        $frameNumber.innerHTML = `${(world.age / 1000).toFixed(1)}`;\r\n    }\r\n\r\n    function updateImage() {\r\n        world.clearImage();\r\n        switch ($viewMode.value) {\r\n            case 'normal':\r\n                world.visualize(drawColors);\r\n                break;\r\n            case 'energy':\r\n                world.visualize(drawEnergy(parseInt($rangeViewEnergy.value)));\r\n                break;\r\n            case 'ages':\r\n                world.visualize(drawAges);\r\n                break;\r\n            case 'families':\r\n                world.visualize(drawFamilies);\r\n                break;\r\n            case 'abilities':\r\n                world.visualize(drawAbilities);\r\n                break;\r\n            case 'action':\r\n                world.visualize(drawLastAction(viewActionsOptions));\r\n                break;\r\n            default: break;\r\n        }\r\n        if ($chbxNarrows.checked) {\r\n            world.drawLayer(getNarrowImg(world));\r\n        }\r\n    }\r\n\r\n    function pauseSimulation() {\r\n        clearInterval(intervalId);\r\n        $chbxUpdImg.checked = false;\r\n        $chbxUpdImg.disabled = true;\r\n        $fps.innerText = '0 (пауза)';\r\n    }\r\n\r\n    function continueSimulation() {\r\n        intervalId = setInterval(step);\r\n        $chbxUpdImg.checked = true;\r\n        $chbxUpdImg.disabled = false;\r\n    }\r\n\r\n    function onChangePause() {\r\n        if ($chbxPause.checked) {\r\n            pauseSimulation();\r\n            ($chbxPause.nextElementSibling as HTMLElement).innerText = 'Продолжить';\r\n        } else {\r\n            continueSimulation();\r\n            ($chbxPause.nextElementSibling as HTMLElement).innerText = 'Пауза';\r\n        }\r\n    };\r\n\r\n    function dragStart(e: TouchEvent | MouseEvent) {\r\n        if (e instanceof TouchEvent) {\r\n            initialX = e.touches[0].clientX - xOffset;\r\n            initialY = e.touches[0].clientY - yOffset;\r\n        } else {\r\n            initialX = e.clientX - xOffset;\r\n            initialY = e.clientY - yOffset;\r\n        }\r\n        if (e.target === $img) {\r\n            active = true;\r\n        }\r\n    }\r\n\r\n    function dragEnd() {\r\n        initialX = currentX;\r\n        initialY = currentY;\r\n        active = false;\r\n    }\r\n\r\n    function drag(e: TouchEvent | MouseEvent) {\r\n        if (active) {\r\n            e.preventDefault();\r\n            if (e instanceof TouchEvent) {\r\n                currentX = e.touches[0].clientX - initialX;\r\n                currentY = e.touches[0].clientY - initialY;\r\n            } else {\r\n                currentX = e.clientX - initialX;\r\n                currentY = e.clientY - initialY;\r\n            }\r\n            xOffset = currentX;\r\n            yOffset = currentY;\r\n            $img.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;\r\n        }\r\n    }\r\n\r\n    let currentX: number;\r\n    let currentY: number;\r\n    let initialX: number;\r\n    let initialY: number;\r\n    let xOffset = 0;\r\n    let yOffset = 0;\r\n    let active = false;\r\n\r\n    const $imgContainer = document.querySelector('#img-container') as HTMLElement;\r\n\r\n    $imgContainer.addEventListener(\"touchstart\", dragStart, false);\r\n    $imgContainer.addEventListener(\"touchend\", dragEnd, false);\r\n    $imgContainer.addEventListener(\"touchmove\", drag, false);\r\n\r\n    $imgContainer.addEventListener(\"mousedown\", dragStart, false);\r\n    $imgContainer.addEventListener(\"mouseup\", dragEnd, false);\r\n    $imgContainer.addEventListener(\"mousemove\", drag, false);\r\n\r\n    const $img = document.querySelector('#img') as HTMLCanvasElement;\r\n\r\n    document.querySelector('#btn-menu')?.addEventListener('change', event => {\r\n        if ((event.target as HTMLInputElement).checked) {\r\n            $imgContainer.classList.add('img-wrapper--menu-opened');\r\n            document.querySelector('#menu')?.classList.add('wrapper__menu--menu-opened');\r\n        } else {\r\n            $imgContainer.classList.remove('img-wrapper--menu-opened');\r\n            document.querySelector('#menu')?.classList.remove('wrapper__menu--menu-opened');\r\n        }\r\n    });\r\n\r\n    const $amount = document.querySelector('#amount') as HTMLElement;\r\n    const $frameNumber = document.querySelector('#frame-number') as HTMLElement;\r\n    const $fps = document.querySelector('#fps') as HTMLElement;\r\n\r\n    const $viewMode = document.querySelector('#view-mode') as HTMLSelectElement;\r\n    $viewMode.addEventListener('change', () => {\r\n        const $viewModeOptionsBlock = document\r\n            .querySelector('#view-modes-options') as HTMLElement;\r\n        Array\r\n            .from($viewModeOptionsBlock.children)\r\n            .forEach(element => {\r\n                if (element.id === `view-${$viewMode.value}-options`) {\r\n                    element.classList.remove('hidden');\r\n                } else {\r\n                    element.classList.add('hidden');\r\n                }\r\n            });\r\n        updateImage();\r\n    });\r\n\r\n    type viewActionsMode\r\n        = 'view-photosynthesis'\r\n        | 'view-attack'\r\n        | 'view-multiply'\r\n        | 'view-share-energy'\r\n        | 'view-move'\r\n        | 'view-do-nothing';\r\n\r\n    const viewActionsOptions = {\r\n        'view-photosynthesis': false,\r\n        'view-attack': false,\r\n        'view-multiply': false,\r\n        'view-share-energy': false,\r\n        'view-move': false,\r\n        'view-do-nothing': false\r\n    };\r\n\r\n    const viewActionsOptionsList: string[] = [];\r\n    for (const actionName in viewActionsOptions) {\r\n        viewActionsOptionsList.push(`#${actionName}`);\r\n    }\r\n\r\n    document.querySelectorAll(viewActionsOptionsList.join(','))\r\n        .forEach(checkbox => {\r\n            const chbx = checkbox as HTMLInputElement;\r\n            chbx.addEventListener('change', () => {\r\n                viewActionsOptions[chbx.id as viewActionsMode] = chbx.checked;\r\n                updateImage();\r\n            });\r\n        });\r\n\r\n    const $rangeViewEnergy = document.querySelector('#view-energy-divider') as HTMLInputElement;\r\n    $rangeViewEnergy.addEventListener('input', updateImage);\r\n\r\n    const $chbxUpdImg = document.querySelector('#chbx-upd-img') as HTMLInputElement;\r\n\r\n    const $chbxNarrows = document.querySelector('#chbx-narrows') as HTMLInputElement;\r\n    $chbxNarrows.addEventListener('change', updateImage);\r\n\r\n    const $chbxPause = document.querySelector('#chbx-pause') as HTMLInputElement;\r\n    $chbxPause.addEventListener('input', onChangePause);\r\n\r\n    document.querySelector('#btn-step')?.addEventListener('click', () => {\r\n        $chbxPause.checked = true;\r\n        onChangePause();\r\n        world.step();\r\n        updateImage();\r\n    });\r\n\r\n    const $inputWidth = document.querySelector('#input-width') as HTMLInputElement;\r\n    const $inputHeight = document.querySelector('#input-height') as HTMLInputElement;\r\n    const $inputPixel = document.querySelector('#input-pixel') as HTMLInputElement;\r\n\r\n    // Normalize input values\r\n    document.querySelectorAll(\r\n        '#input-width, #input-height, #input-pixel'\r\n    ).forEach(elem => {\r\n        elem.addEventListener('change', event => {\r\n            const target = event.target as HTMLInputElement;\r\n            target.value = (limNumber(\r\n                parseInt(target.min),\r\n                parseInt(target.max),\r\n                parseInt(target.value)\r\n            ) || parseInt(target.min)).toString();\r\n        })\r\n    });\r\n\r\n    const $inputBots = document.querySelector('#input-bots') as HTMLInputElement;\r\n\r\n    document.querySelector('#btn-start')?.addEventListener('click', start);\r\n\r\n    onResizeWindow();\r\n\r\n    let world: World;\r\n\r\n    start();\r\n\r\n    let lastLoop = Date.now();\r\n    let fps = 0;\r\n    let intervalId = setInterval(step);\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}