{"version":3,"sources":["webpack://artifical-life/./lib/math-functions.ts","webpack://artifical-life/./lib/drawing.ts","webpack://artifical-life/./lib/Grid.ts","webpack://artifical-life/./lib/world.ts","webpack://artifical-life/./lib/Bot.ts","webpack://artifical-life/./index.ts"],"names":["randFloat","bottom","top","Math","random","randInt","floor","randChoice","arr","length","fixNumber","min","max","number","normalizeNumber","limNumber","interpolate","a","b","t","red","green","blue","alpha","randRgb","Rgba","other","this","normalise","mutateRgb","value","difference","abs","MAX_DIF","width","height","node","document","createElement","ctx","getContext","data","getImageData","setPixel","x","y","color","POINTER","update","putImageData","Canvas","cells","get","set","remove","swap","x2","y2","bufferA","bufferB","fixCoords","randCoords","randEmpty","coords","world","assign","alive","onStep","onDie","Block","pixelSize","img","imageSmoothingEnabled","dynamic","block","drawLayer","layer","drawImage","clearImage","clearRect","visualize","func","PixelsData","col","i","init","step","key","undefined","energy","genome","family","abilities","Bot","amount","_narrow","age","n","narrowToCoords","narrow","getForvard","moveTo","multiplyTo","replication","randMove","doAction","DeadBot","DynamicBlock","bot","genes","_pointer","randGene","action","GENE_TEMPLATES","property","branches","mutateGene","gene","map","fillRandom","fillPlant","Genome","GENE","pointer","RESULT","goto","completed","photo","attack","forward","E","start","World","parseInt","querySelector","BOTS_AMOUNT","drawColors","drawEnergy","drawAbilities","drawFamilies","window","addEventListener","$amount","$fps","$viewMode","cycle","lastLoop","performance","now","fps","fpsList","Array","fill","setInterval","thisLoop","pop","unshift","innerHTML","reduce","toFixed"],"mappings":"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","file":"bundle.js","sourcesContent":["export function* range(from: number, to: number) {\r\n    while (from < to) {\r\n        yield from++;\r\n    }\r\n}\r\n\r\nexport function randFloat(bottom: number, top: number) {\r\n    return Math.random() * (top - bottom) + bottom;\r\n}\r\n\r\nexport function randInt(bottom: number, top: number) {\r\n    return Math.floor(randFloat(bottom, top));\r\n}\r\n\r\nexport function randChoice<T>(arr: T[]): T {\r\n    return arr[randInt(0, arr.length)];\r\n}\r\n\r\nexport function fixNumber(min: number, max: number, number: number): number {\r\n    return number >= min ? number % max : max - (-number % max);\r\n}\r\n\r\nexport function normalizeNumber(\r\n    min: number,\r\n    max: number,\r\n    number: number\r\n): number {\r\n    return (number - min) / (max - min);\r\n}\r\n\r\nexport function limNumber(min: number, max: number, number: number): number {\r\n    return Math.max(Math.min(number, max), min);\r\n}\r\n\r\nexport function interpolate(a: number, b: number, t: number): number {\r\n    return a + (b - a) * t;\r\n}\r\n","import { interpolate, limNumber, randFloat, randInt } from \"./math-functions\";\r\n\r\nexport class Rgba {\r\n    private static readonly MAX_DIF = 255 * 4;\r\n    static randRgb(): Rgba {\r\n        return new Rgba(randInt(0, 256), randInt(0, 256), randInt(0, 256), 255);\r\n    }\r\n    constructor(\r\n        readonly red: number,\r\n        readonly green: number,\r\n        readonly blue: number,\r\n        readonly alpha: number\r\n    ) { }\r\n    interpolate(other: Rgba, t: number): Rgba {\r\n        return new Rgba(\r\n            interpolate(this.red, other.red, t),\r\n            interpolate(this.green, other.green, t),\r\n            interpolate(this.blue, other.blue, t),\r\n            interpolate(this.alpha, other.alpha, t)\r\n        );\r\n    }\r\n    normalise(): Rgba {\r\n        return new Rgba(\r\n            limNumber(0, 255, this.red),\r\n            limNumber(0, 255, this.green),\r\n            limNumber(0, 255, this.blue),\r\n            limNumber(0, 255, this.alpha)\r\n        );\r\n    }\r\n    mutateRgb(value: number): Rgba {\r\n        return new Rgba(\r\n            this.red + randFloat(-value, value),\r\n            this.green + randFloat(-value, value),\r\n            this.blue + randFloat(-value, value),\r\n            this.alpha\r\n        ).normalise();\r\n    }\r\n    difference(other: Rgba): number {\r\n        return ((\r\n            Math.abs(this.red - other.red) +\r\n            Math.abs(this.green - other.green) +\r\n            Math.abs(this.blue - other.blue) +\r\n            Math.abs(this.alpha - other.alpha)\r\n        ) / Rgba.MAX_DIF);\r\n    }\r\n}\r\n\r\nexport class Canvas {\r\n    readonly node: HTMLCanvasElement;\r\n    readonly ctx: CanvasRenderingContext2D;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        this.node = node || document.createElement(\"canvas\");\r\n        this.node.width = width;\r\n        this.node.height = height;\r\n        this.ctx = this.node.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    }\r\n}\r\n\r\nexport class PixelsData extends Canvas {\r\n    readonly data: ImageData;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        super(width, height, node);\r\n        this.data = this.ctx.getImageData(\r\n            0,\r\n            0,\r\n            this.node.width,\r\n            this.node.height\r\n        );\r\n    }\r\n    setPixel(x: number, y: number, color: Rgba) {\r\n        const POINTER = (y * this.data.width + x) * 4;\r\n        this.data.data[POINTER] = color.red;\r\n        this.data.data[POINTER + 1] = color.green;\r\n        this.data.data[POINTER + 2] = color.blue;\r\n        this.data.data[POINTER + 3] = color.alpha;\r\n    }\r\n    update() {\r\n        this.ctx.putImageData(this.data, 0, 0);\r\n        return this;\r\n    }\r\n}\r\n","import { fixNumber, randInt } from \"./math-functions\";\r\n\r\nexport default class Grid<T> {\r\n    private readonly cells: (T | undefined)[][];\r\n    constructor(readonly width: number, readonly height: number) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            this.cells[x] = [];\r\n        }\r\n    }\r\n    get(x: number, y: number): T | undefined {\r\n        return this.cells[x][y];\r\n    }\r\n    set(x: number, y: number, value: T | undefined) {\r\n        this.cells[x][y] = value;\r\n    }\r\n    remove(x: number, y: number) {\r\n        delete this.cells[x][y];\r\n    }\r\n    swap(x: number, y: number, x2: number, y2: number) {\r\n        const bufferA = this.get(x, y);\r\n        const bufferB = this.get(x2, y2);\r\n        this.set(x, y, bufferB);\r\n        this.set(x2, y2, bufferA);\r\n    }\r\n    fixCoords(x: number, y: number): [number, number] {\r\n        return [\r\n            fixNumber(0, this.width, x),\r\n            fixNumber(0, this.height, y),\r\n        ];\r\n    }\r\n    randCoords(): [number, number] {\r\n        return [\r\n            randInt(0, this.width),\r\n            randInt(0, this.height)\r\n        ];\r\n    }\r\n    randEmpty(): [number, number] {\r\n        let coords: [number, number];\r\n        do {\r\n            coords = this.randCoords();\r\n        } while (this.get(...coords));\r\n        return coords;\r\n    }\r\n}\r\n","import { Canvas, PixelsData, Rgba } from \"./drawing\";\r\nimport Grid from \"./Grid\";\r\nimport { fixNumber, randInt, range } from \"./math-functions\";\r\n\r\nexport class Block {\r\n    constructor(\r\n        readonly world: World,\r\n        public x: number,\r\n        public y: number,\r\n        public color: Rgba\r\n    ) {\r\n        world.set(x, y, this);\r\n    }\r\n}\r\n\r\nexport class DynamicBlock extends Block {\r\n    alive: boolean;\r\n    constructor(world: World, x: number, y: number, color: Rgba) {\r\n        super(world, x, y, color);\r\n        world.assign(this);\r\n        this.alive = true;\r\n    }\r\n    onStep() {\r\n\r\n    }\r\n    onDie() {\r\n\r\n    }\r\n}\r\n\r\nexport class World extends Grid<Block | undefined> {\r\n    private readonly img: Canvas;\r\n    private dynamic: { a: any; b: any; };\r\n    constructor(\r\n        readonly width: number,\r\n        readonly height: number,\r\n        pixelSize: number,\r\n        node: HTMLCanvasElement\r\n    ) {\r\n        super(width, height);\r\n        this.img = new Canvas(width * pixelSize, height * pixelSize, node);\r\n        this.img.ctx.imageSmoothingEnabled = false;\r\n        this.dynamic = { a: {}, b: {} };\r\n    }\r\n    set(x: number, y: number, block: Block | undefined) {\r\n        super.set(x, y, block);\r\n        if (block) {\r\n            block.x = x;\r\n            block.y = y;\r\n        }\r\n    }\r\n    drawLayer(layer: CanvasImageSource) {\r\n        this.img.ctx.drawImage(\r\n            layer,\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    clearImage() {\r\n        this.img.ctx.clearRect(\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    visualize(func: (block: any | undefined, x: number, y: number) => Rgba | null) {\r\n        let img = new PixelsData(this.width, this.height);\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                const col = func(this.get(x, y), x, y);\r\n                if (col) {\r\n                    img.setPixel(x, y, col);\r\n                }\r\n            }\r\n        }\r\n        this.drawLayer(img.update().node);\r\n    }\r\n    assign(block: DynamicBlock) {\r\n        let i: number;\r\n        do {\r\n            i = randInt(0, this.width * this.height * 1000);\r\n        } while (this.dynamic.a[i]);\r\n        this.dynamic.a[i] = block;\r\n    }\r\n    init() {\r\n        this.dynamic.b = this.dynamic.a;\r\n    }\r\n    step() {\r\n        this.dynamic.a = {};\r\n        for (const key in this.dynamic.b) {\r\n            const block: DynamicBlock = this.dynamic.b[key];\r\n            if (!block.alive) {\r\n                this.set(block.x, block.y, undefined);\r\n                block.onDie();\r\n            } else {\r\n                block.onStep();\r\n                this.assign(block);\r\n            }\r\n        }\r\n        this.dynamic.b = this.dynamic.a;\r\n    }\r\n}\r\n","import { Rgba } from \"./drawing\";\r\nimport { fixNumber, limNumber, randChoice, randFloat, randInt } from \"./math-functions\";\r\nimport { Block, DynamicBlock, World } from \"./world\";\r\n\r\nexport default class Bot extends DynamicBlock {\r\n    static amount = 0;\r\n    private _narrow: number;\r\n    age: number;\r\n    constructor(\r\n        world: World,\r\n        x: number,\r\n        y: number,\r\n        color: Rgba,\r\n        public energy: number,\r\n        public genome: Genome,\r\n        public family: Rgba,\r\n        public abilities: {\r\n            photo: number,\r\n            attack: number\r\n        }\r\n    ) {\r\n        super(world, x, y, color);\r\n        Bot.amount++;\r\n        this._narrow = randInt(0, 8);\r\n        this.age = 0;\r\n    }\r\n    set narrow(n: number) {\r\n        this._narrow = fixNumber(0, 8, n);\r\n    }\r\n    get narrow(): number {\r\n        return this._narrow;\r\n    }\r\n    narrowToCoords(): [number, number] {\r\n        //   0 1 2\r\n        //   7   3\r\n        //   6 5 4\r\n        const coords = [\r\n            [-1, -1],\r\n            [0, -1],\r\n            [1, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [-1, 0],\r\n        ];\r\n        const x = this.x + coords[this.narrow][0];\r\n        const y = this.y + coords[this.narrow][1];\r\n        return [x, y];\r\n    }\r\n    getForvard() {\r\n        const coords = this.world.fixCoords(...this.narrowToCoords());\r\n        return { block: this.world.get(...coords), coords: coords };\r\n    }\r\n    moveTo(x: number, y: number) {\r\n        this.world.swap(this.x, this.y, x, y);\r\n    }\r\n    multiplyTo(x: number, y: number) {\r\n        new Bot(\r\n            this.world,\r\n            x,\r\n            y,\r\n            this.color.interpolate(new Rgba(255, 255, 255, 255), 0.25),\r\n            this.energy / 3,\r\n            this.genome.replication(),\r\n            this.family.mutateRgb(10),\r\n            { ...this.abilities }\r\n        );\r\n        this.energy /= 3;\r\n    }\r\n    randMove() {\r\n        const coords = this.world.fixCoords(\r\n            this.x + randInt(-1, 2),\r\n            this.y + randInt(-1, 2)\r\n        );\r\n        this.moveTo(...coords);\r\n    }\r\n    onStep() {\r\n        if (this.energy < 1 || this.energy > 100 || this.age > 2000) {\r\n            this.alive = false;\r\n            return;\r\n        }\r\n        this.genome.doAction(this);\r\n        this.energy -= 0.1;\r\n        this.age += 1;\r\n    }\r\n    onDie() {\r\n        Bot.amount--;\r\n        new DeadBot(this);\r\n    }\r\n}\r\n\r\nclass DeadBot extends DynamicBlock {\r\n    constructor(bot: Bot) {\r\n        super(bot.world, bot.x, bot.y, bot.color.interpolate(new Rgba(0, 0, 0, 255), 0.5));\r\n    }\r\n    onStep() {\r\n        this.color = this.color.interpolate(new Rgba(10, 10, 50, 255), 0.001);\r\n    }\r\n}\r\n\r\nexport class Genome {\r\n    genes: Gene[];\r\n    private _pointer: number;\r\n    constructor(readonly length: number) {\r\n        this.genes = [];\r\n        this._pointer = 0;\r\n    }\r\n    set pointer(n: number) {\r\n        this._pointer = fixNumber(0, this.length, n);\r\n    }\r\n    get pointer() {\r\n        return this._pointer;\r\n    }\r\n    randGene(): Gene {\r\n        return {\r\n            action: randChoice(GENE_TEMPLATES),\r\n            property: Math.random(),\r\n            branches: [\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length)\r\n            ]\r\n        };\r\n    }\r\n    mutateGene(gene: Gene): Gene {\r\n        return {\r\n            action: Math.random() > 0.9 ? randChoice(GENE_TEMPLATES) : gene.action,\r\n            property: limNumber(0, 1, gene.property + randFloat(-0.01, 0.01)),\r\n            branches: gene.branches.map(\r\n                i => Math.random() > 0.9\r\n                    ? randInt(0, this.length)\r\n                    : i\r\n            ) as [number, number, number, number]\r\n        }\r\n    }\r\n    fillRandom() {\r\n        for (let i = 0; i < this.length; i++) {\r\n            this.genes[i] = this.randGene();\r\n        }\r\n        return this;\r\n    }\r\n    fillPlant() {\r\n        for (let i = 0; i < this.length; i++) {\r\n            this.genes[i] = {\r\n                action: GENE_TEMPLATES[randInt(0, 3)],\r\n                property: Math.random(),\r\n                branches: [\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length),\r\n                    randInt(0, this.length)\r\n                ]\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    // replication2() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.mutateGene(this.genes[i]);\r\n    //     }\r\n    //     return genome;\r\n    // }\r\n    // replication() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.genes[i];\r\n    //     }\r\n    //     const pointer = randInt(0, genome.length);\r\n    //     genome.genes[pointer] = this.mutateGene(this.genes[pointer]);\r\n    //     return genome;\r\n    // }\r\n    replication() {\r\n        const genome = new Genome(this.length);\r\n        for (let i = 0; i < this.length; i++) {\r\n            genome.genes[i] = Math.random() > 0.995\r\n                ? this.mutateGene(this.genes[i])\r\n                : this.genes[i];\r\n        }\r\n        return genome;\r\n    }\r\n    doAction(bot: Bot) {\r\n        for (let i = 0; i < 20; i++) {\r\n            const GENE: Gene = this.genes[this.pointer];\r\n            const RESULT = GENE.action(bot, GENE.property, GENE.branches);\r\n            if (RESULT.goto) {\r\n                this.pointer = RESULT.goto;\r\n            } else {\r\n                this.pointer++;\r\n            }\r\n            if (RESULT.completed) return;\r\n        }\r\n        bot.color = bot.color.interpolate(new Rgba(100, 100, 100, 255), 0.1);\r\n    }\r\n}\r\n\r\ntype ActionResult = { completed: boolean, goto?: number }\r\n\r\ntype ActionFn = (\r\n    bot: Bot,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n) => ActionResult;\r\n\r\ntype Gene = {\r\n    action: ActionFn,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n}\r\n\r\nconst GENE_TEMPLATES: ActionFn[] = [\r\n    // Photosynthesis\r\n    (bot, property, branches) => {\r\n        bot.energy += 0.5 * bot.abilities.photo ** 2;\r\n        bot.abilities.photo = Math.min(1, bot.abilities.photo + 0.01);\r\n        bot.abilities.attack = Math.max(0, bot.abilities.attack - 0.01);\r\n        bot.color = bot.color.interpolate(new Rgba(0, 255, 0, 255), 0.01);\r\n        return { completed: true }\r\n    },\r\n    // Rotate\r\n    (bot, property, branches) => {\r\n        if (property > 0.5) {\r\n            bot.narrow++;\r\n        } else {\r\n            bot.narrow--;\r\n        }\r\n        return { completed: false }\r\n    },\r\n    // Multiply\r\n    (bot, property, branches) => {\r\n        const forward = bot.getForvard();\r\n        if (!forward.block && bot.age > 2) {\r\n            bot.multiplyTo(...forward.coords);\r\n        }\r\n        return { completed: true }\r\n    },\r\n    // Share energy\r\n    (bot, property, branches) => {\r\n        bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.005);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot && forward.block.energy < bot.energy) {\r\n            const E = (forward.block.energy + bot.energy) / 2;\r\n            bot.energy = E;\r\n            forward.block.energy = E;\r\n        }\r\n        return { completed: true }\r\n    },\r\n    // Look forward\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            if (forward.block.family.difference(bot.color) < property) {\r\n                return { completed: false, goto: branches[0] }\r\n            } else {\r\n                return { completed: false, goto: branches[1] }\r\n            }\r\n        } else if (forward.block instanceof DeadBot) {\r\n            return { completed: false, goto: branches[2] }\r\n        } else {\r\n            return { completed: false, goto: branches[3] }\r\n        }\r\n    },\r\n    (bot, property, branches) => {\r\n        if (bot.energy / 100 < property) {\r\n            return { completed: false, goto: branches[0] }\r\n        } else {\r\n            return { completed: false, goto: branches[1] }\r\n        }\r\n    },\r\n    // DestroyDead\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof DeadBot) {\r\n            forward.block.alive = false;\r\n        }\r\n        return { completed: true }\r\n    },\r\n    // Move\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (!forward.block) bot.moveTo(...forward.coords);\r\n        return { completed: true }\r\n    },\r\n    // // Move 2\r\n    // (bot, property, branches) => {\r\n    //     // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     bot.moveTo(...forward.coords);\r\n    //     bot.energy -= 0.1;\r\n    //     return { completed: true }\r\n    // },\r\n    // Kill\r\n    (bot, property, branches) => {\r\n        bot.energy -= 0.1;\r\n        bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        bot.abilities.attack = Math.min(1, bot.abilities.attack + 0.01);\r\n        bot.abilities.photo = Math.max(0, bot.abilities.photo - 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            const E = (forward.block.energy / 3) * bot.abilities.attack ** 2;\r\n            forward.block.energy -= E;\r\n            bot.energy += E;\r\n        }\r\n        return { completed: true }\r\n    },\r\n];","import Bot, { Genome } from \"./lib/Bot\";\r\nimport { Rgba } from \"./lib/drawing\";\r\nimport { normalizeNumber } from \"./lib/math-functions\";\r\nimport { Block, World } from \"./lib/world\";\r\n\r\nfunction start() {\r\n\r\n    Bot.amount = 0;\r\n\r\n    world = new World(\r\n        parseInt((document.querySelector('#input-width') as HTMLInputElement).value),\r\n        parseInt((document.querySelector('#input-height') as HTMLInputElement).value),\r\n        parseInt((document.querySelector('#input-pixel') as HTMLInputElement).value),\r\n        document.querySelector('#img') as HTMLCanvasElement\r\n    );\r\n\r\n    const BOTS_AMOUNT = parseInt((document.querySelector('#input-bots') as HTMLInputElement).value);\r\n\r\n    for (let i = 0; i < Math.min(world.width * world.height, BOTS_AMOUNT); i++) {\r\n        const a = new Bot(\r\n            world,\r\n            ...world.randEmpty(),\r\n            new Rgba(100, 100, 100, 255),\r\n            100,\r\n            new Genome(64).fillRandom(),\r\n            Rgba.randRgb(),\r\n            { photo: 0.5, attack: 0.5 }\r\n        );\r\n        a.narrow = 0;\r\n    }\r\n\r\n    world.init();\r\n}\r\n\r\nfunction drawColors(block: any) {\r\n    if (block instanceof Block) {\r\n        return block.color;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawEnergy(block: any) {\r\n    if (block instanceof Bot) {\r\n        return new Rgba(0, 0, 255, 255)\r\n            .interpolate(\r\n                new Rgba(255, 255, 0, 255),\r\n                block.energy / 100\r\n            );\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawAbilities(block: any) {\r\n    if (block instanceof Bot) {\r\n        return new Rgba(\r\n            normalizeNumber(0.5, 1, block.abilities.attack) * 255,\r\n            normalizeNumber(0.5, 1, block.abilities.photo) * 255,\r\n            50,\r\n            255\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction drawFamilies(bot: any) {\r\n    if (bot instanceof Bot) {\r\n        return bot.family;\r\n    }\r\n    return null;\r\n}\r\n\r\nlet world: World;\r\n\r\nwindow.addEventListener('load', () => {\r\n    const $amount = document.querySelector('#amount') as HTMLElement;\r\n    const $fps = document.querySelector('#fps') as HTMLElement;\r\n    const $viewMode = document.querySelector('#view-mode') as HTMLSelectElement;\r\n    document.querySelector('#btn-start')?.addEventListener('click', start);\r\n    start();\r\n\r\n    let cycle = 0;\r\n    let lastLoop = performance.now();\r\n    let fps = 0;\r\n    let fpsList = new Array(5).fill(0);\r\n    setInterval(() => {\r\n        let thisLoop = performance.now();\r\n        fps = 1000 / (thisLoop - lastLoop);\r\n        fpsList.pop();\r\n        fpsList.unshift(fps);\r\n        lastLoop = thisLoop;\r\n        world.step();\r\n        if (cycle % 1 === 0) {\r\n            switch ($viewMode.value) {\r\n                case 'normal': world.clearImage(); world.visualize(drawColors); break;\r\n                case 'energy': world.clearImage(); world.visualize(drawEnergy); break;\r\n                case 'families': world.clearImage(); world.visualize(drawFamilies); break;\r\n                case 'abilities': world.clearImage(); world.visualize(drawAbilities); break;\r\n                default: break;\r\n            }\r\n        }\r\n        // world.clearImage(); world.visualize(drawLight);\r\n        $amount.innerHTML = Bot.amount.toString();\r\n        $fps.innerHTML = (fpsList.reduce((a, b) => a + b) / fpsList.length).toFixed(1);\r\n        cycle++;\r\n    });\r\n\r\n    // (function loop() {\r\n    //     let thisLoop = performance.now();\r\n    //     fps = 1000 / (thisLoop - lastLoop);\r\n    //     fpsList.pop();\r\n    //     fpsList.unshift(fps);\r\n    //     lastLoop = thisLoop;\r\n    //     world.step();\r\n    //     if (cycle % 1 === 0) {\r\n    //         switch ($viewMode.value) {\r\n    //             case 'normal': world.clearImage(); world.visualize(drawColors); break;\r\n    //             case 'energy': world.clearImage(); world.visualize(drawEnergy); break;\r\n    //             case 'families': world.clearImage(); world.visualize(drawFamilies); break;\r\n    //             case 'abilities': world.clearImage(); world.visualize(drawAbilities); break;\r\n    //             default: break;\r\n    //         }\r\n    //     }\r\n    //     // world.clearImage(); world.visualize(drawLight);\r\n    //     $amount.innerHTML = Bot.amount.toString();\r\n    //     $fps.innerHTML = (fpsList.reduce((a, b) => a + b) / fpsList.length).toFixed(1);\r\n    //     cycle++;\r\n    //     requestAnimationFrame(loop);\r\n    // })();\r\n});"],"sourceRoot":""}