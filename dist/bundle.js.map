{"version":3,"sources":["webpack://artifical-life/./src/lib/Bot.ts","webpack://artifical-life/./src/lib/Gene-templates.ts","webpack://artifical-life/./src/lib/Grid.ts","webpack://artifical-life/./src/lib/drawing.ts","webpack://artifical-life/./src/lib/math-functions.ts","webpack://artifical-life/./src/lib/view-modes.ts","webpack://artifical-life/./src/lib/world.ts","webpack://artifical-life/./src/main.ts","webpack://artifical-life/webpack/bootstrap","webpack://artifical-life/webpack/startup"],"names":["world","x","y","color","energy","genome","family","abilities","Bot","amount","_narrow","randInt","age","lastAction","name","Rgba","this","n","fixNumber","narrowToCoords","MOORE_NEIGHBOURHOOD","narrow","fixCoords","getForvard","coords","block","get","moveTo","swap","multiplyTo","interpolate","replication","mutateRgb","randMove","onStep","alive","doAction","onDie","DynamicBlock","bot","DeadBot","length","genes","_pointer","randGene","action","randChoice","Genome","genePool","property","Math","random","branches","mutateGene","gene","limNumber","randFloat","map","i","fillRandom","start","GENE","pointer","RESULT","goto","completed","createGenePool","getAllGenesNames","pool","geneName","push","GENES","Object","keys","photo","min","attack","max","forward","E","difference","width","height","cells","set","value","remove","x2","y2","bufferA","bufferB","randCoords","randEmpty","red","green","blue","alpha","randRgb","other","t","normalise","abs","MAX_DIF","node","document","createElement","ctx","getContext","Canvas","data","createImageData","setPixel","POINTER","update","putImageData","PixelsData","bottom","top","floor","from","to","arr","number","a","b","Block","divider","normalizeNumber","options","img","xy","assign","pixelSize","imageSmoothingEnabled","dynamic","drawLayer","layer","drawImage","clearImage","clearRect","visualize","func","col","init","step","key","undefined","World","window","addEventListener","appState","currentX","currentY","initialX","initialY","onResizeWindow","querySelector","style","maxHeight","innerHeight","startNewWorld","getGenePool","parseInt","$inputWidth","$inputHeight","$inputPixel","$img","BOTS_AMOUNT","$inputBots","updateImage","updateHTMLInfo","transform","botsAmount","imgOffset","console","log","Date","now","lastLoop","$fps","innerText","fps","toFixed","$chbxUpdImg","checked","$amount","innerHTML","toString","$frameNumber","$viewMode","drawColors","drawEnergy","$rangeViewEnergy","drawAges","drawFamilies","drawAbilities","drawLastAction","viewActionsOptions","$chbxNarrows","getNarrowImg","onChangePause","$chbxPause","clearInterval","intervalId","disabled","nextElementSibling","setInterval","dragStart","e","TouchEvent","touches","clientX","clientY","target","active","dragEnd","drag","preventDefault","$imgContainer","event","classList","add","$viewModeOptionsBlock","Array","children","forEach","element","id","viewActionsOptionsList","actionName","querySelectorAll","join","checkbox","chbx","geneNames","geneCheckboxesId","elem","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"bundle.js","sourcesContent":["import { Rgba } from \"./drawing\";\r\nimport { ActionFn, createGenePool, getAllGenesNames } from \"./Gene-templates\";\r\nimport { fixNumber, limNumber, randChoice, randFloat, randInt } from \"./math-functions\";\r\nimport { DynamicBlock, MOORE_NEIGHBOURHOOD, World } from \"./world\";\r\n\r\nexport default class Bot extends DynamicBlock {\r\n    static amount = 0;\r\n    private _narrow: number;\r\n    age: number;\r\n    lastAction: { name: string, color: Rgba };\r\n    constructor(\r\n        world: World,\r\n        x: number,\r\n        y: number,\r\n        color: Rgba,\r\n        public energy: number,\r\n        public genome: Genome,\r\n        public family: Rgba,\r\n        public abilities: {\r\n            photo: number,\r\n            attack: number\r\n        }\r\n    ) {\r\n        super(world, x, y, color);\r\n        Bot.amount++;\r\n        this._narrow = randInt(0, 8);\r\n        this.age = 0;\r\n        this.lastAction = { name: 'none', color: new Rgba(20, 20, 20, 255) };\r\n    }\r\n    set narrow(n: number) {\r\n        this._narrow = fixNumber(0, 8, n);\r\n    }\r\n    get narrow(): number {\r\n        return this._narrow;\r\n    }\r\n    narrowToCoords(): [number, number] {\r\n        const x = this.x + MOORE_NEIGHBOURHOOD[this.narrow][0];\r\n        const y = this.y + MOORE_NEIGHBOURHOOD[this.narrow][1];\r\n        return this.world.fixCoords(x, y);\r\n    }\r\n    getForvard() {\r\n        const coords = this.narrowToCoords();\r\n        return { block: this.world.get(...coords), coords: coords };\r\n    }\r\n    moveTo(x: number, y: number) {\r\n        this.world.swap(this.x, this.y, x, y);\r\n    }\r\n    multiplyTo(x: number, y: number) {\r\n        new Bot(\r\n            this.world,\r\n            x,\r\n            y,\r\n            this.color.interpolate(new Rgba(255, 255, 255, 255), 0.25),\r\n            this.energy / 3,\r\n            this.genome.replication(),\r\n            this.family.mutateRgb(10),\r\n            { ...this.abilities }\r\n        );\r\n        this.energy /= 3;\r\n    }\r\n    randMove() {\r\n        const coords = this.world.fixCoords(\r\n            this.x + randInt(-1, 2),\r\n            this.y + randInt(-1, 2)\r\n        );\r\n        this.moveTo(...coords);\r\n    }\r\n    onStep() {\r\n        if (this.energy < 1 || this.energy > 100 || this.age > 2000) {\r\n            this.alive = false;\r\n            return;\r\n        }\r\n        this.genome.doAction(this);\r\n        this.energy -= 0.1;\r\n        this.age += 1;\r\n    }\r\n    onDie() {\r\n        Bot.amount--;\r\n        // new DeadBot(this);\r\n    }\r\n}\r\n\r\nexport class DeadBot extends DynamicBlock {\r\n    age: number;\r\n    constructor(bot: Bot) {\r\n        super(bot.world, bot.x, bot.y, bot.color.interpolate(new Rgba(0, 0, 0, 255), 0.5));\r\n        this.age = 0;\r\n    }\r\n    onStep() {\r\n        if (this.age > 500) {\r\n            this.alive = false;\r\n        }\r\n        this.color = this.color.interpolate(new Rgba(10, 10, 50, 255), 0.005);\r\n        this.age++;\r\n    }\r\n}\r\n\r\nexport class Genome {\r\n    static genePool = createGenePool(getAllGenesNames());\r\n    genes: Gene[];\r\n    private _pointer: number;\r\n    constructor(readonly length: number) {\r\n        this.genes = [];\r\n        this._pointer = 0;\r\n    }\r\n    set pointer(n: number) {\r\n        this._pointer = fixNumber(0, this.length, n);\r\n    }\r\n    get pointer() {\r\n        return this._pointer;\r\n    }\r\n    randGene(): Gene {\r\n        return {\r\n            action: randChoice(Genome.genePool),\r\n            property: Math.random(),\r\n            branches: [\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length),\r\n                randInt(0, this.length)\r\n            ]\r\n        };\r\n    }\r\n    mutateGene(gene: Gene): Gene {\r\n        return {\r\n            action: Math.random() > 0.9 ? randChoice(Genome.genePool) : gene.action,\r\n            property: limNumber(0, 1, gene.property + randFloat(-0.01, 0.01)),\r\n            branches: gene.branches.map(\r\n                i => Math.random() > 0.9\r\n                    ? randInt(0, this.length)\r\n                    : i\r\n            ) as [number, number, number, number]\r\n        }\r\n    }\r\n    fillRandom(start: number = 0): this {\r\n        for (let i = start; i < this.length; i++) {\r\n            this.genes[i] = this.randGene();\r\n        }\r\n        return this;\r\n    }\r\n    // replication2() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.mutateGene(this.genes[i]);\r\n    //     }\r\n    //     return genome;\r\n    // }\r\n    // replication() {\r\n    //     const genome = new Genome(this.length);\r\n    //     for (let i = 0; i < this.length; i++) {\r\n    //         genome.genes[i] = this.genes[i];\r\n    //     }\r\n    //     const pointer = randInt(0, genome.length);\r\n    //     genome.genes[pointer] = this.mutateGene(this.genes[pointer]);\r\n    //     return genome;\r\n    // }\r\n    replication() {\r\n        const genome = new Genome(this.length);\r\n        for (let i = 0; i < this.length; i++) {\r\n            genome.genes[i] = Math.random() > 0.995\r\n                ? this.mutateGene(this.genes[i])\r\n                : this.genes[i];\r\n        }\r\n        return genome;\r\n    }\r\n    doAction(bot: Bot) {\r\n        // bot.lastAction = { name: 'none', color: new Rgba(20, 20, 20, 255) };\r\n        for (let i = 0; i < 20; i++) {\r\n            const GENE: Gene = this.genes[this.pointer];\r\n            const RESULT = GENE.action(bot, GENE.property, GENE.branches);\r\n            if (RESULT.goto) {\r\n                this.pointer = RESULT.goto;\r\n            } else {\r\n                this.pointer++;\r\n            }\r\n            if (RESULT.completed) return;\r\n        }\r\n        bot.lastAction = { name: 'view-do-nothing', color: new Rgba(50, 50, 50, 255) };\r\n        bot.color = bot.color.interpolate(new Rgba(100, 100, 100, 255), 0.1);\r\n    }\r\n}\r\n\r\ntype Gene = {\r\n    action: ActionFn,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n}","import Bot, { DeadBot } from \"./Bot\";\r\nimport { Rgba } from \"./drawing\";\r\n\r\nexport type ActionResult = { completed: boolean, goto?: number }\r\n\r\nexport type ActionFn = (\r\n    bot: Bot,\r\n    property: number,\r\n    branches: [number, number, number, number]\r\n) => ActionResult;\r\n\r\nexport function createGenePool(genes: GeneName[]): ActionFn[] {\r\n    const pool = [];\r\n    for (const geneName of genes) {\r\n        pool.push(GENES[geneName]);\r\n    }\r\n    return pool;\r\n}\r\n\r\nexport function getAllGenesNames(): GeneName[] {\r\n    return Object.keys(GENES) as GeneName[]\r\n}\r\n\r\nexport type GeneName = keyof typeof GENES;\r\n\r\n\r\nexport const GENES = {\r\n\r\n    'restart': ((bot, property, branches) => {\r\n        return { completed: false, goto: 0 }\r\n    }) as ActionFn,\r\n\r\n    'photosynthesis': ((bot, property, branches) => {\r\n        bot.energy += 0.5 * bot.abilities.photo ** 2;\r\n        bot.abilities.photo = Math.min(1, bot.abilities.photo + 0.01);\r\n        bot.abilities.attack = Math.max(0, bot.abilities.attack - 0.01);\r\n        bot.color = bot.color.interpolate(new Rgba(0, 255, 0, 255), 0.01);\r\n        bot.lastAction = { name: 'view-photosynthesis', color: new Rgba(0, 200, 0, 255) }\r\n        return { completed: true }\r\n    }) as ActionFn,\r\n\r\n    'rotate': ((bot, property, branches) => {\r\n        if (property > 0.5) {\r\n            bot.narrow++;\r\n        } else {\r\n            bot.narrow--;\r\n        }\r\n        return { completed: false }\r\n    }) as ActionFn,\r\n\r\n    'multiply': ((bot, property, branches) => {\r\n        const forward = bot.getForvard();\r\n        if (!forward.block && bot.age > 2) {\r\n            bot.multiplyTo(...forward.coords);\r\n            bot.lastAction = { name: 'view-multiply', color: new Rgba(0, 0, 200, 255) };\r\n        }\r\n        // bot.lastAction = new Rgba(0, 0, 255, 255);\r\n        return { completed: true }\r\n    }) as ActionFn,\r\n\r\n    'share-energy': ((bot, property, branches) => {\r\n        bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.005);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot && forward.block.energy < bot.energy) {\r\n            const E = (forward.block.energy + bot.energy) / 2;\r\n            bot.energy = E;\r\n            forward.block.energy = E;\r\n            bot.lastAction = { name: 'view-share-energy', color: new Rgba(0, 150, 150, 255) };\r\n        }\r\n        // bot.lastAction = new Rgba(0, 100, 255, 255);\r\n        return { completed: true }\r\n    }) as ActionFn,\r\n\r\n    'move': ((bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (!forward.block) bot.moveTo(...forward.coords);\r\n        bot.lastAction = { name: 'view-move', color: new Rgba(150, 150, 150, 255) };\r\n        return { completed: true }\r\n    }) as ActionFn,\r\n\r\n    'attack': ((bot, property, branches) => {\r\n        bot.energy -= 0.1;\r\n        bot.color = bot.color.interpolate(new Rgba(255, 0, 0, 255), 0.01);\r\n        bot.abilities.attack = Math.min(1, bot.abilities.attack + 0.01);\r\n        bot.abilities.photo = Math.max(0, bot.abilities.photo - 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            const E = (forward.block.energy / 2) * bot.abilities.attack ** 2;\r\n            forward.block.energy -= forward.block.energy / 2;\r\n            bot.energy += E;\r\n            bot.lastAction = { name: 'view-attack', color: new Rgba(200, 0, 0, 255) };\r\n        }\r\n        // bot.lastAction = new Rgba(255, 0, 0, 255);\r\n        return { completed: true }\r\n    }) as ActionFn,\r\n\r\n    'look-forward': ((bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            if (forward.block.family.difference(bot.color) < property) {\r\n                return { completed: false, goto: branches[0] }\r\n            } else {\r\n                return { completed: false, goto: branches[1] }\r\n            }\r\n        } else if (forward.block instanceof DeadBot) {\r\n            return { completed: false, goto: branches[2] }\r\n        } else {\r\n            return { completed: false, goto: branches[3] }\r\n        }\r\n    }) as ActionFn,\r\n\r\n    'check-energy': ((bot, property, branches) => {\r\n        if (bot.energy / 100 < property) {\r\n            return { completed: false, goto: branches[0] }\r\n        } else {\r\n            return { completed: false, goto: branches[1] }\r\n        }\r\n    }) as ActionFn,\r\n\r\n    'virus': ((bot, property, branches) => {\r\n        bot.color = bot.color.interpolate(new Rgba(255, 0, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            forward.block.genome = bot.genome.replication();\r\n            bot.lastAction = { name: 'view-virus', color: new Rgba(200, 0, 200, 255) };\r\n        }\r\n        return { completed: true }\r\n    }) as ActionFn,\r\n\r\n};\r\n\r\nconst GENE_TEMPLATES: ActionFn[] = [\r\n\r\n    // Look forward\r\n    (bot, property, branches) => {\r\n        // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n        const forward = bot.getForvard();\r\n        if (forward.block instanceof Bot) {\r\n            if (forward.block.family.difference(bot.color) < property) {\r\n                return { completed: false, goto: branches[0] }\r\n            } else {\r\n                return { completed: false, goto: branches[1] }\r\n            }\r\n        } else if (forward.block instanceof DeadBot) {\r\n            return { completed: false, goto: branches[2] }\r\n        } else {\r\n            return { completed: false, goto: branches[3] }\r\n        }\r\n    },\r\n\r\n    (bot, property, branches) => {\r\n        if (bot.energy / 100 < property) {\r\n            return { completed: false, goto: branches[0] }\r\n        } else {\r\n            return { completed: false, goto: branches[1] }\r\n        }\r\n    },\r\n\r\n    // // DestroyDead\r\n    // (bot, property, branches) => {\r\n    //     // bot.color = bot.color.interpolate(new Rgba(0, 0, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     if (forward.block instanceof DeadBot && forward.block.age > 2) {\r\n    //         forward.block.alive = false;\r\n    //         // bot.lastAction = new Rgba(255, 255, 0, 255);\r\n    //     }\r\n    //     // bot.lastAction = new Rgba(255, 255, 0, 255);\r\n    //     return { completed: true }\r\n    // },\r\n\r\n    // // Move 2\r\n    // (bot, property, branches) => {\r\n    //     // bot.color = bot.color.interpolate(new Rgba(255, 255, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     bot.moveTo(...forward.coords);\r\n    //     bot.energy -= 0.1;\r\n    //     return { completed: true }\r\n    // },\r\n\r\n\r\n    // // Virus\r\n    // (bot, property, branches) => {\r\n    //     bot.color = bot.color.interpolate(new Rgba(255, 0, 255, 255), 0.01);\r\n    //     const forward = bot.getForvard();\r\n    //     if (forward.block instanceof Bot) {\r\n    //         forward.block.genome = bot.genome.replication();\r\n    //         bot.lastAction = new Rgba(255, 0, 255, 255);\r\n    //     }\r\n    //     return { completed: true }\r\n    // }\r\n];","import { fixNumber, randInt } from \"./math-functions\";\r\n\r\nexport default class Grid<T> {\r\n    private readonly cells: (T | undefined)[][];\r\n    constructor(readonly width: number, readonly height: number) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            this.cells[x] = [];\r\n        }\r\n    }\r\n    get(x: number, y: number): T | undefined {\r\n        return this.cells[x][y];\r\n    }\r\n    set(x: number, y: number, value: T | undefined) {\r\n        this.cells[x][y] = value;\r\n    }\r\n    remove(x: number, y: number) {\r\n        delete this.cells[x][y];\r\n    }\r\n    swap(x: number, y: number, x2: number, y2: number) {\r\n        const bufferA = this.get(x, y);\r\n        const bufferB = this.get(x2, y2);\r\n        this.set(x, y, bufferB);\r\n        this.set(x2, y2, bufferA);\r\n    }\r\n    fixCoords(x: number, y: number): [number, number] {\r\n        return [\r\n            fixNumber(0, this.width, x),\r\n            fixNumber(0, this.height, y),\r\n        ];\r\n    }\r\n    randCoords(): [number, number] {\r\n        return [\r\n            randInt(0, this.width),\r\n            randInt(0, this.height)\r\n        ];\r\n    }\r\n    randEmpty(): [number, number] {\r\n        let coords: [number, number];\r\n        do {\r\n            coords = this.randCoords();\r\n        } while (this.get(...coords));\r\n        return coords;\r\n    }\r\n}\r\n","import { interpolate, limNumber, randFloat, randInt } from \"./math-functions\";\r\n\r\nexport class Rgba {\r\n    private static readonly MAX_DIF = 255 * 4;\r\n    static randRgb(): Rgba {\r\n        return new Rgba(randInt(0, 256), randInt(0, 256), randInt(0, 256), 255);\r\n    }\r\n    constructor(\r\n        readonly red: number,\r\n        readonly green: number,\r\n        readonly blue: number,\r\n        readonly alpha: number\r\n    ) { }\r\n    interpolate(other: Rgba, t: number): Rgba {\r\n        return new Rgba(\r\n            interpolate(this.red, other.red, t),\r\n            interpolate(this.green, other.green, t),\r\n            interpolate(this.blue, other.blue, t),\r\n            interpolate(this.alpha, other.alpha, t)\r\n        );\r\n    }\r\n    normalise(): Rgba {\r\n        return new Rgba(\r\n            limNumber(0, 255, this.red),\r\n            limNumber(0, 255, this.green),\r\n            limNumber(0, 255, this.blue),\r\n            limNumber(0, 255, this.alpha)\r\n        );\r\n    }\r\n    mutateRgb(value: number): Rgba {\r\n        return new Rgba(\r\n            this.red + randFloat(-value, value),\r\n            this.green + randFloat(-value, value),\r\n            this.blue + randFloat(-value, value),\r\n            this.alpha\r\n        ).normalise();\r\n    }\r\n    difference(other: Rgba): number {\r\n        return ((\r\n            Math.abs(this.red - other.red) +\r\n            Math.abs(this.green - other.green) +\r\n            Math.abs(this.blue - other.blue) +\r\n            Math.abs(this.alpha - other.alpha)\r\n        ) / Rgba.MAX_DIF);\r\n    }\r\n}\r\n\r\nexport class Canvas {\r\n    readonly node: HTMLCanvasElement;\r\n    readonly ctx: CanvasRenderingContext2D;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        this.node = node || document.createElement(\"canvas\");\r\n        this.node.width = width;\r\n        this.node.height = height;\r\n        this.ctx = this.node.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    }\r\n}\r\n\r\nexport class PixelsData extends Canvas {\r\n    readonly data: ImageData;\r\n    constructor(width: number, height: number, node?: HTMLCanvasElement) {\r\n        super(width, height, node);\r\n        this.data = this.ctx.createImageData(\r\n            this.node.width,\r\n            this.node.height\r\n        );\r\n    }\r\n    setPixel(x: number, y: number, color: Rgba) {\r\n        const POINTER = (y * this.data.width + x) * 4;\r\n        this.data.data[POINTER] = color.red;\r\n        this.data.data[POINTER + 1] = color.green;\r\n        this.data.data[POINTER + 2] = color.blue;\r\n        this.data.data[POINTER + 3] = color.alpha;\r\n    }\r\n    update() {\r\n        this.ctx.putImageData(this.data, 0, 0);\r\n        return this;\r\n    }\r\n}\r\n","export function* range(from: number, to: number) {\r\n    while (from < to) {\r\n        yield from++;\r\n    }\r\n}\r\n\r\nexport function randFloat(bottom: number, top: number) {\r\n    return Math.random() * (top - bottom) + bottom;\r\n}\r\n\r\nexport function randInt(bottom: number, top: number) {\r\n    return Math.floor(randFloat(bottom, top));\r\n}\r\n\r\nexport function randChoice<T>(arr: T[]): T {\r\n    return arr[randInt(0, arr.length)];\r\n}\r\n\r\nexport function fixNumber(min: number, max: number, number: number): number {\r\n    return number >= min ? number % max : max - (-number % max);\r\n}\r\n\r\nexport function normalizeNumber(\r\n    min: number,\r\n    max: number,\r\n    number: number\r\n): number {\r\n    return (number - min) / (max - min);\r\n}\r\n\r\nexport function limNumber(min: number, max: number, number: number): number {\r\n    return Math.max(Math.min(number, max), min);\r\n}\r\n\r\nexport function interpolate(a: number, b: number, t: number): number {\r\n    return a + (b - a) * t;\r\n}\r\n","import Bot from \"./Bot\";\r\nimport { PixelsData, Rgba } from \"./drawing\";\r\nimport { normalizeNumber } from \"./math-functions\";\r\nimport { Block, MOORE_NEIGHBOURHOOD, World } from \"./world\";\r\n\r\nexport function drawColors(block: any) {\r\n    if (block instanceof Block) {\r\n        return block.color;\r\n    }\r\n    return null;\r\n}\r\n\r\n// export function drawEnergy(block: any) {\r\n//     if (block instanceof Bot) {\r\n//         return new Rgba(20, 20, 100, 255)\r\n//             .interpolate(\r\n//                 new Rgba(255, 255, 0, 255),\r\n//                 block.energy / 100\r\n//             );\r\n//     }\r\n//     return null;\r\n// }\r\n\r\nexport function drawEnergy(divider: number): (block: any) => Rgba | null {\r\n    return block => {\r\n        return block instanceof Bot\r\n            ? new Rgba(0, 0, 50, 255)\r\n                .interpolate(\r\n                    new Rgba(255, 255, 0, 255),\r\n                    block.energy / divider\r\n                )\r\n            : null;\r\n    }\r\n}\r\n\r\nexport function drawAbilities(block: any) {\r\n    if (block instanceof Bot) {\r\n        return new Rgba(\r\n            normalizeNumber(0.5, 1, block.abilities.attack) * 255,\r\n            normalizeNumber(0.5, 1, block.abilities.photo) * 255,\r\n            50,\r\n            255\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function drawFamilies(block: any) {\r\n    if (block instanceof Bot) {\r\n        return block.family;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function drawAges(block: any) {\r\n    return block instanceof Bot\r\n        ? new Rgba(150, 150, 150, 255)\r\n            .interpolate(new Rgba(0, 0, 100, 255), block.age / 2000)\r\n        : null;\r\n}\r\n\r\nexport function drawLastAction(options: any): (block: any) => Rgba | null {\r\n    return block => {\r\n        return block instanceof Bot\r\n            ? options[block.lastAction.name]\r\n                ? block.lastAction.color\r\n                : new Rgba(20, 20, 20, 255)\r\n            : null\r\n    }\r\n}\r\n\r\nexport function getNarrowImg(world: World): HTMLCanvasElement {\r\n    const img = new PixelsData(world.width * 3, world.height * 3);\r\n    for (let x = 0; x < world.width; x++) {\r\n        for (let y = 0; y < world.height; y++) {\r\n            const block = world.get(x, y);\r\n            if (block instanceof Bot) {\r\n                const xy: [number, number] = [\r\n                    block.x * 3 + 1 + MOORE_NEIGHBOURHOOD[block.narrow][0],\r\n                    block.y * 3 + 1 + MOORE_NEIGHBOURHOOD[block.narrow][1],\r\n                ];\r\n                img.setPixel(...xy, new Rgba(0, 0, 0, 127));\r\n            }\r\n        }\r\n    }\r\n    img.update();\r\n    return img.node;\r\n}","import { Canvas, PixelsData, Rgba } from \"./drawing\";\r\nimport Grid from \"./Grid\";\r\nimport { fixNumber, randInt, range } from \"./math-functions\";\r\n\r\nexport const MOORE_NEIGHBOURHOOD: [number, number][] = [\r\n    [-1, -1],\r\n    [0, -1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, 1],\r\n    [-1, 1],\r\n    [-1, 0],\r\n];\r\n\r\nexport class Block {\r\n    constructor(\r\n        readonly world: World,\r\n        public x: number,\r\n        public y: number,\r\n        public color: Rgba\r\n    ) {\r\n        world.set(x, y, this);\r\n    }\r\n}\r\n\r\nexport class DynamicBlock extends Block {\r\n    alive: boolean;\r\n    constructor(world: World, x: number, y: number, color: Rgba) {\r\n        super(world, x, y, color);\r\n        world.assign(this);\r\n        this.alive = true;\r\n    }\r\n    onStep() {\r\n\r\n    }\r\n    onDie() {\r\n\r\n    }\r\n}\r\n\r\nexport class World extends Grid<Block | undefined> {\r\n    private readonly img: Canvas;\r\n    private dynamic: { a: any; b: any; };\r\n    age: number;\r\n    constructor(\r\n        readonly width: number,\r\n        readonly height: number,\r\n        pixelSize: number,\r\n        node: HTMLCanvasElement\r\n    ) {\r\n        super(width, height);\r\n        this.img = new Canvas(width * pixelSize, height * pixelSize, node);\r\n        this.img.ctx.imageSmoothingEnabled = false;\r\n        this.dynamic = { a: {}, b: {} };\r\n        this.age = 0;\r\n    }\r\n    set(x: number, y: number, block: Block | undefined) {\r\n        super.set(x, y, block);\r\n        if (block) {\r\n            block.x = x;\r\n            block.y = y;\r\n        }\r\n    }\r\n    drawLayer(layer: CanvasImageSource) {\r\n        this.img.ctx.drawImage(\r\n            layer,\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    clearImage() {\r\n        this.img.ctx.clearRect(\r\n            0,\r\n            0,\r\n            this.img.node.width,\r\n            this.img.node.height\r\n        );\r\n    }\r\n    visualize(func: (block: any | undefined, x: number, y: number) => Rgba | null) {\r\n        let img = new PixelsData(this.width, this.height);\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                const col = func(this.get(x, y), x, y);\r\n                if (col) {\r\n                    img.setPixel(x, y, col);\r\n                }\r\n            }\r\n        }\r\n        this.drawLayer(img.update().node);\r\n    }\r\n    assign(block: DynamicBlock) {\r\n        let i: number;\r\n        do {\r\n            i = randInt(0, this.width * this.height * 1000);\r\n        } while (this.dynamic.a[i]);\r\n        this.dynamic.a[i] = block;\r\n    }\r\n    init() {\r\n        this.dynamic.b = this.dynamic.a;\r\n    }\r\n    step() {\r\n        this.dynamic.a = {};\r\n        for (const key in this.dynamic.b) {\r\n            const block: DynamicBlock = this.dynamic.b[key];\r\n            if (!block.alive) {\r\n                this.set(block.x, block.y, undefined);\r\n                block.onDie();\r\n            } else {\r\n                block.onStep();\r\n                this.assign(block);\r\n            }\r\n        }\r\n        this.dynamic.b = this.dynamic.a;\r\n        this.age++;\r\n    }\r\n}\r\n","import Bot, { Genome } from \"./lib/Bot\";\r\nimport { Rgba } from \"./lib/drawing\";\r\nimport { ActionFn, createGenePool, GeneName, getAllGenesNames } from \"./lib/Gene-templates\";\r\nimport { limNumber } from \"./lib/math-functions\";\r\nimport {\r\n    drawAbilities,\r\n    drawAges,\r\n    drawColors,\r\n    drawEnergy,\r\n    drawFamilies,\r\n    drawLastAction,\r\n    getNarrowImg\r\n} from \"./lib/view-modes\";\r\nimport { World } from \"./lib/world\";\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    type AppState = {\r\n        world: World,\r\n        botsAmount: number,\r\n        imgOffset: { x: number, y: number },\r\n        genePool: ActionFn[],\r\n    };\r\n\r\n    function onResizeWindow() {\r\n        (document.querySelector('.wrapper') as HTMLElement)\r\n            .style\r\n            .maxHeight = `${window.innerHeight}px`;\r\n    }\r\n\r\n    function startNewWorld() {\r\n\r\n        Bot.amount = 0;\r\n        Genome.genePool = getGenePool();\r\n\r\n        world = new World(\r\n            parseInt($inputWidth.value),\r\n            parseInt($inputHeight.value),\r\n            parseInt($inputPixel.value),\r\n            $img\r\n        );\r\n\r\n        const BOTS_AMOUNT = parseInt($inputBots.value);\r\n\r\n        for (let i = 0; i < Math.min(world.width * world.height, BOTS_AMOUNT); i++) {\r\n            new Bot(\r\n                world,\r\n                ...world.randEmpty(),\r\n                new Rgba(100, 100, 100, 255),\r\n                100,\r\n                new Genome(64).fillRandom(),\r\n                Rgba.randRgb(),\r\n                { photo: 0.5, attack: 0.5 }\r\n            );\r\n        }\r\n\r\n        world.init();\r\n        updateImage();\r\n\r\n        updateHTMLInfo();\r\n        $img.style.transform = 'none';\r\n        appState = {\r\n            world: world,\r\n            botsAmount: Bot.amount,\r\n            imgOffset: { x: 0, y: 0 },\r\n            genePool: [...Genome.genePool]\r\n        }\r\n        console.log(appState);\r\n    }\r\n\r\n    function step() {\r\n        if (Date.now() - lastLoop > 1000) {\r\n            $fps.innerText = fps.toFixed(0);\r\n            fps = 0;\r\n            lastLoop = Date.now();\r\n        }\r\n        fps++;\r\n        world.step();\r\n        if ($chbxUpdImg.checked) updateImage();\r\n        updateHTMLInfo();\r\n    }\r\n\r\n    function updateHTMLInfo() {\r\n        $amount.innerHTML = Bot.amount.toString();\r\n        $frameNumber.innerHTML = `${(world.age / 1000).toFixed(1)}`;\r\n    }\r\n\r\n    function updateImage() {\r\n        world.clearImage();\r\n        switch ($viewMode.value) {\r\n            case 'normal':\r\n                world.visualize(drawColors);\r\n                break;\r\n            case 'energy':\r\n                world.visualize(drawEnergy(parseInt($rangeViewEnergy.value)));\r\n                break;\r\n            case 'ages':\r\n                world.visualize(drawAges);\r\n                break;\r\n            case 'families':\r\n                world.visualize(drawFamilies);\r\n                break;\r\n            case 'abilities':\r\n                world.visualize(drawAbilities);\r\n                break;\r\n            case 'action':\r\n                world.visualize(drawLastAction(viewActionsOptions));\r\n                break;\r\n            default: break;\r\n        }\r\n        if ($chbxNarrows.checked) {\r\n            world.drawLayer(getNarrowImg(world));\r\n        }\r\n    }\r\n\r\n    function pauseSimulation() {\r\n        clearInterval(intervalId);\r\n        $chbxUpdImg.checked = false;\r\n        $chbxUpdImg.disabled = true;\r\n        $fps.innerText = '0 (пауза)';\r\n    }\r\n\r\n    function continueSimulation() {\r\n        intervalId = setInterval(step);\r\n        $chbxUpdImg.checked = true;\r\n        $chbxUpdImg.disabled = false;\r\n    }\r\n\r\n    function onChangePause() {\r\n        if ($chbxPause.checked) {\r\n            pauseSimulation();\r\n            ($chbxPause.nextElementSibling as HTMLElement).innerText = 'Продолжить';\r\n        } else {\r\n            continueSimulation();\r\n            ($chbxPause.nextElementSibling as HTMLElement).innerText = 'Пауза';\r\n        }\r\n    };\r\n\r\n    function dragStart(e: TouchEvent | MouseEvent) {\r\n        if (e instanceof TouchEvent) {\r\n            initialX = e.touches[0].clientX - appState.imgOffset.x;\r\n            initialY = e.touches[0].clientY - appState.imgOffset.y;\r\n        } else {\r\n            initialX = e.clientX - appState.imgOffset.x;\r\n            initialY = e.clientY - appState.imgOffset.y;\r\n        }\r\n        if (e.target === $img) {\r\n            active = true;\r\n        }\r\n    }\r\n\r\n    function dragEnd() {\r\n        initialX = currentX;\r\n        initialY = currentY;\r\n        active = false;\r\n    }\r\n\r\n    function drag(e: TouchEvent | MouseEvent) {\r\n        if (active) {\r\n            e.preventDefault();\r\n            if (e instanceof TouchEvent) {\r\n                currentX = e.touches[0].clientX - initialX;\r\n                currentY = e.touches[0].clientY - initialY;\r\n            } else {\r\n                currentX = e.clientX - initialX;\r\n                currentY = e.clientY - initialY;\r\n            }\r\n            appState.imgOffset.x = currentX;\r\n            appState.imgOffset.y = currentY;\r\n            $img.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;\r\n        }\r\n    }\r\n\r\n    window.addEventListener('resize', onResizeWindow);\r\n\r\n    onResizeWindow();\r\n\r\n    let world: World;\r\n\r\n    let appState: AppState;\r\n\r\n    let currentX: number;\r\n    let currentY: number;\r\n    let initialX: number;\r\n    let initialY: number;\r\n    let active = false;\r\n\r\n    const $imgContainer = document.querySelector('#img-container') as HTMLElement;\r\n\r\n    $imgContainer.addEventListener(\"touchstart\", dragStart, false);\r\n    $imgContainer.addEventListener(\"touchend\", dragEnd, false);\r\n    $imgContainer.addEventListener(\"touchmove\", drag, false);\r\n\r\n    $imgContainer.addEventListener(\"mousedown\", dragStart, false);\r\n    $imgContainer.addEventListener(\"mouseup\", dragEnd, false);\r\n    $imgContainer.addEventListener(\"mousemove\", drag, false);\r\n\r\n    const $img = document.querySelector('#img') as HTMLCanvasElement;\r\n\r\n    document.querySelector('#btn-menu')?.addEventListener('change', event => {\r\n        if ((event.target as HTMLInputElement).checked) {\r\n            $imgContainer.classList.add('img-wrapper--menu-opened');\r\n            document.querySelector('#menu')?.classList.add('wrapper__menu--menu-opened');\r\n        } else {\r\n            $imgContainer.classList.remove('img-wrapper--menu-opened');\r\n            document.querySelector('#menu')?.classList.remove('wrapper__menu--menu-opened');\r\n        }\r\n    });\r\n\r\n    const $amount = document.querySelector('#amount') as HTMLElement;\r\n    const $frameNumber = document.querySelector('#frame-number') as HTMLElement;\r\n    const $fps = document.querySelector('#fps') as HTMLElement;\r\n\r\n    const $viewMode = document.querySelector('#view-mode') as HTMLSelectElement;\r\n    $viewMode.addEventListener('change', () => {\r\n        const $viewModeOptionsBlock = document\r\n            .querySelector('#view-modes-options') as HTMLElement;\r\n        Array\r\n            .from($viewModeOptionsBlock.children)\r\n            .forEach(element => {\r\n                if (element.id === `view-${$viewMode.value}-options`) {\r\n                    element.classList.remove('hidden');\r\n                } else {\r\n                    element.classList.add('hidden');\r\n                }\r\n            });\r\n        updateImage();\r\n    });\r\n\r\n    type viewActionsMode\r\n        = 'view-photosynthesis'\r\n        | 'view-attack'\r\n        | 'view-multiply'\r\n        | 'view-share-energy'\r\n        | 'view-move'\r\n        | 'view-do-nothing'\r\n        | 'view-virus';\r\n\r\n    const viewActionsOptions = {\r\n        'view-photosynthesis': false,\r\n        'view-attack': false,\r\n        'view-multiply': false,\r\n        'view-share-energy': false,\r\n        'view-move': false,\r\n        'view-do-nothing': false,\r\n        'view-virus': false,\r\n    };\r\n\r\n    const viewActionsOptionsList: string[] = [];\r\n    for (const actionName in viewActionsOptions) {\r\n        viewActionsOptionsList.push(`#${actionName}`);\r\n    }\r\n\r\n    document.querySelectorAll(viewActionsOptionsList.join(','))\r\n        .forEach(checkbox => {\r\n            const chbx = checkbox as HTMLInputElement;\r\n            chbx.addEventListener('change', () => {\r\n                viewActionsOptions[chbx.id as viewActionsMode] = chbx.checked;\r\n                updateImage();\r\n            });\r\n        });\r\n\r\n    const $rangeViewEnergy = document.querySelector('#view-energy-divider') as HTMLInputElement;\r\n    $rangeViewEnergy.addEventListener('input', updateImage);\r\n\r\n    const $chbxUpdImg = document.querySelector('#chbx-upd-img') as HTMLInputElement;\r\n\r\n    const $chbxNarrows = document.querySelector('#chbx-narrows') as HTMLInputElement;\r\n    $chbxNarrows.addEventListener('change', updateImage);\r\n\r\n    const $chbxPause = document.querySelector('#chbx-pause') as HTMLInputElement;\r\n    $chbxPause.addEventListener('input', onChangePause);\r\n\r\n    document.querySelector('#btn-step')?.addEventListener('click', () => {\r\n        $chbxPause.checked = true;\r\n        onChangePause();\r\n        world.step();\r\n        updateImage();\r\n    });\r\n\r\n\r\n    function getGenePool() {\r\n        const geneNames: GeneName[] = [];\r\n        for (const geneName of getAllGenesNames()) {\r\n            const $chbx = document.querySelector(`#chbx-gene-${geneName}`) as HTMLInputElement;\r\n            // console.log(document.querySelector(`#chbx-gene-${geneName}`), geneName);\r\n            if ($chbx.checked) geneNames.push(geneName);\r\n        }\r\n        console.log(geneNames);\r\n        return createGenePool(geneNames);\r\n    }\r\n\r\n    const geneCheckboxesId = getAllGenesNames()\r\n        .map(n => `#chbx-gene-${n}`)\r\n        .join(', ');\r\n\r\n    document.querySelectorAll(geneCheckboxesId).forEach(elem => {\r\n        const $chbx = elem as HTMLInputElement;\r\n        $chbx.addEventListener('change', () => {\r\n            appState.genePool = getGenePool();\r\n            Genome.genePool = getGenePool();\r\n        });\r\n    });\r\n\r\n    const $inputWidth = document.querySelector('#input-width') as HTMLInputElement;\r\n    const $inputHeight = document.querySelector('#input-height') as HTMLInputElement;\r\n    const $inputPixel = document.querySelector('#input-pixel') as HTMLInputElement;\r\n\r\n    // Normalize input values\r\n    document.querySelectorAll(\r\n        '#input-width, #input-height, #input-pixel'\r\n    ).forEach(elem => {\r\n        elem.addEventListener('change', event => {\r\n            const target = event.target as HTMLInputElement;\r\n            target.value = (limNumber(\r\n                parseInt(target.min),\r\n                parseInt(target.max),\r\n                parseInt(target.value)\r\n            ) || parseInt(target.min)).toString();\r\n        })\r\n    });\r\n\r\n    const $inputBots = document.querySelector('#input-bots') as HTMLInputElement;\r\n\r\n    document.querySelector('#btn-start')?.addEventListener('click', startNewWorld);\r\n\r\n    startNewWorld();\r\n\r\n    let lastLoop = Date.now();\r\n    let fps = 0;\r\n    let intervalId = setInterval(step);\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}